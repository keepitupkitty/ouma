use crate::{
  c_char,
  c_int,
  locale_t,
  mbstate_t,
  std::stdlib,
  wchar_t,
  wctype_t,
  wint_t
};

// Perform binary search across character table.
#[inline(always)]
fn wcbsearch(
  ch: u32,
  extents: &[u32]
) -> isize {
  let key: u32 = (ch << 11) | 0x7ff;
  let mut min: usize = 0;
  let mut max: usize = extents.len() - 1;
  loop {
    let mid: usize = (min + max + 1) / 2;
    if key < extents[mid] {
      max = mid - 1;
    } else {
      min = mid;
    }

    if !(min < max) {
      break;
    }
  }
  if ch >= (extents[min] >> 11) &&
    ch <= (extents[min] >> 11) + (extents[min] & 0x7ff)
  {
    min as isize
  } else {
    -1
  }
}

#[inline(always)]
fn towctrans_search(
  wc: wint_t,
  extents: &[u32],
  deltas: &[i32]
) -> wint_t {
  let idx = wcbsearch(wc, extents);
  if idx >= 0 {
    return wc.wrapping_add(deltas[idx as usize] as wint_t);
  }
  wc
}

#[inline(always)]
fn valid_in_locale(
  wc: wint_t,
  locale: locale_t
) -> bool {
  static mut PRIVATE: mbstate_t = mbstate_t { seq: [0; 4], surrogate: 0 };
  let buf: [c_char; stdlib::MB_LEN_MAX as usize] =
    [0; stdlib::MB_LEN_MAX as usize];
  return unsafe {
    (locale.ctype.wcrtomb)(
      buf.as_ptr() as *mut c_char,
      wc as wchar_t,
      &mut PRIVATE
    ) != -1
  };
}

#[no_mangle]
pub extern "C" fn ouma_iswalnum(wc: wint_t) -> c_int {
  const EXTENTS: [u32; 764] = [
    0x00018009, 0x00020819, 0x00030819, 0x00055000, 0x00059001, 0x0005a800,
    0x0005c801, 0x0005e002, 0x00060016, 0x0006c01e, 0x0007c1c9, 0x0016300b,
    0x00170004, 0x00176000, 0x00177000, 0x001a2800, 0x001b8004, 0x001bb001,
    0x001bd003, 0x001bf800, 0x001c3000, 0x001c4002, 0x001c6000, 0x001c7013,
    0x001d1852, 0x001fb88a, 0x002450a5, 0x00298825, 0x002ac800, 0x002b0028,
    0x002e801a, 0x002f7803, 0x0031002a, 0x00330009, 0x00337001, 0x00338862,
    0x0036a800, 0x00372801, 0x0037700e, 0x0037f800, 0x00388000, 0x0038901d,
    0x003a6858, 0x003d8800, 0x003e002a, 0x003fa001, 0x003fd000, 0x00400015,
    0x0040d000, 0x00412000, 0x00414000, 0x00420018, 0x0043000a, 0x00438017,
    0x00444805, 0x00450029, 0x00482035, 0x0049e800, 0x004a8000, 0x004ac009,
    0x004b3009, 0x004b880f, 0x004c2807, 0x004c7801, 0x004c9815, 0x004d5006,
    0x004d9000, 0x004db003, 0x004de800, 0x004e7000, 0x004ee001, 0x004ef802,
    0x004f300b, 0x004fa005, 0x004fe000, 0x00502805, 0x00507801, 0x00509815,
    0x00515006, 0x00519001, 0x0051a801, 0x0051c001, 0x0052c803, 0x0052f000,
    0x00533009, 0x00539002, 0x00542808, 0x00547802, 0x00549815, 0x00555006,
    0x00559001, 0x0055a804, 0x0055e800, 0x00568000, 0x00570001, 0x00573009,
    0x0057c800, 0x00582807, 0x00587801, 0x00589815, 0x00595006, 0x00599001,
    0x0059a804, 0x0059e800, 0x005ae001, 0x005af802, 0x005b3009, 0x005b8806,
    0x005c1800, 0x005c2805, 0x005c7002, 0x005c9003, 0x005cc801, 0x005ce000,
    0x005cf001, 0x005d1801, 0x005d4002, 0x005d700b, 0x005e8000, 0x005f300c,
    0x00602807, 0x00607002, 0x00609016, 0x0061500f, 0x0061e800, 0x0062c002,
    0x0062e800, 0x00630001, 0x00633009, 0x0063c006, 0x00640000, 0x00642807,
    0x00647002, 0x00649016, 0x00655009, 0x0065a804, 0x0065e800, 0x0066e801,
    0x00670001, 0x00673009, 0x00678801, 0x00682008, 0x00687002, 0x00689028,
    0x0069e800, 0x006a7000, 0x006aa002, 0x006ac009, 0x006b3012, 0x006bd005,
    0x006c2811, 0x006cd017, 0x006d9808, 0x006de800, 0x006e0006, 0x006f3009,
    0x0070082f, 0x00719001, 0x00720006, 0x00728009, 0x00740801, 0x00742000,
    0x00743004, 0x00746017, 0x00752800, 0x00753809, 0x00759001, 0x0075e800,
    0x00760004, 0x00763000, 0x00768009, 0x0076e003, 0x00780000, 0x00790013,
    0x007a0007, 0x007a4823, 0x007c4004, 0x0080002a, 0x0081f80a, 0x00828005,
    0x0082d003, 0x00830800, 0x00832801, 0x00837002, 0x0083a80c, 0x00847000,
    0x00848009, 0x00850025, 0x00863800, 0x00866800, 0x0086802a, 0x0087e14c,
    0x00925003, 0x00928006, 0x0092c000, 0x0092d003, 0x00930028, 0x00945003,
    0x00948020, 0x00959003, 0x0095c006, 0x00960000, 0x00961003, 0x0096400e,
    0x0096c038, 0x00989003, 0x0098c042, 0x009b4813, 0x009c000f, 0x009d0055,
    0x009fc005, 0x00a00a6b, 0x00b37810, 0x00b40819, 0x00b5004a, 0x00b7700a,
    0x00b80011, 0x00b8f812, 0x00ba0011, 0x00bb000c, 0x00bb7002, 0x00bc0033,
    0x00beb800, 0x00bee000, 0x00bf0009, 0x00bf8009, 0x00c08009, 0x00c10058,
    0x00c40004, 0x00c43821, 0x00c55000, 0x00c58045, 0x00c8001e, 0x00ca3027,
    0x00cb8004, 0x00cc002b, 0x00cd8019, 0x00ce800a, 0x00d00016, 0x00d10034,
    0x00d40009, 0x00d48009, 0x00d53800, 0x00d8282e, 0x00da2807, 0x00da8009,
    0x00dc181d, 0x00dd7037, 0x00e00023, 0x00e20009, 0x00e26830, 0x00e40008,
    0x00e4802a, 0x00e5e802, 0x00e74803, 0x00e77005, 0x00e7a801, 0x00e7d000,
    0x00e800bf, 0x00f00115, 0x00f8c005, 0x00f90025, 0x00fa4005, 0x00fa8007,
    0x00fac800, 0x00fad800, 0x00fae800, 0x00faf81e, 0x00fc0034, 0x00fdb006,
    0x00fdf000, 0x00fe1002, 0x00fe3006, 0x00fe8003, 0x00feb005, 0x00ff000c,
    0x00ff9002, 0x00ffb006, 0x01038001, 0x0103a005, 0x0103f80a, 0x0104800c,
    0x01081000, 0x01083800, 0x01085009, 0x0108a800, 0x0108c804, 0x01092000,
    0x01093000, 0x01094005, 0x0109780a, 0x0109e003, 0x010a2804, 0x010a7000,
    0x010a8039, 0x0123009f, 0x013bb01d, 0x016000e4, 0x01675803, 0x01679001,
    0x0167e800, 0x01680025, 0x01693800, 0x01696800, 0x01698037, 0x016b7800,
    0x016c0016, 0x016d0006, 0x016d4006, 0x016d8006, 0x016dc006, 0x016e0006,
    0x016e4006, 0x016e8006, 0x016ec006, 0x01717800, 0x01802802, 0x01810808,
    0x01818804, 0x0181c004, 0x01820855, 0x0184e802, 0x01850859, 0x0187e003,
    0x0188282a, 0x0189885d, 0x018c9003, 0x018d001f, 0x018f800f, 0x01910009,
    0x01924007, 0x0192880e, 0x01940009, 0x0195880e, 0x01a00000, 0x026df800,
    0x02700000, 0x04fffc8d, 0x0526802d, 0x0528010c, 0x0530801b, 0x0532002e,
    0x0533f81e, 0x0535004f, 0x0538b808, 0x05391066, 0x053c583f, 0x053e8001,
    0x053e9800, 0x053ea804, 0x053f900f, 0x05401802, 0x05403803, 0x05406016,
    0x05418005, 0x05420033, 0x05441031, 0x05468009, 0x05479005, 0x0547d800,
    0x0547e801, 0x05480025, 0x05498016, 0x054b001c, 0x054c202e, 0x054e780a,
    0x054f0004, 0x054f3018, 0x05500028, 0x05520002, 0x05522007, 0x05528009,
    0x05530016, 0x0553d000, 0x0553f031, 0x05558800, 0x0555a801, 0x0555c804,
    0x05560000, 0x05561000, 0x0556d802, 0x0557000a, 0x05579002, 0x05580805,
    0x05584805, 0x05588805, 0x05590006, 0x05594006, 0x0559802a, 0x055ae00d,
    0x055b8072, 0x055f8009, 0x05600000, 0x06bd1800, 0x06bd8016, 0x06be5830,
    0x07c8016d, 0x07d38069, 0x07d80006, 0x07d89804, 0x07d8e800, 0x07d8f809,
    0x07d9500c, 0x07d9c004, 0x07d9f000, 0x07da0001, 0x07da1801, 0x07da306b,
    0x07de996a, 0x07ea803f, 0x07ec9035, 0x07ef800b, 0x07f38004, 0x07f3b086,
    0x07f88009, 0x07f90819, 0x07fa0819, 0x07fb3058, 0x07fe1005, 0x07fe5005,
    0x07fe9005, 0x07fed002, 0x0800000b, 0x08006819, 0x08014012, 0x0801e001,
    0x0801f80e, 0x0802800d, 0x0804007a, 0x0808382c, 0x080a0038, 0x080c5001,
    0x0814001c, 0x08150030, 0x0817081a, 0x08180023, 0x0819681d, 0x081a8025,
    0x081c001d, 0x081d0023, 0x081e4007, 0x081e8804, 0x0820009d, 0x08250009,
    0x08258023, 0x0826c023, 0x08280027, 0x08298033, 0x082b800a, 0x082be00e,
    0x082c6006, 0x082ca001, 0x082cb80a, 0x082d180e, 0x082d9806, 0x082dd801,
    0x08300136, 0x083a0015, 0x083b0007, 0x083c0005, 0x083c3829, 0x083d9008,
    0x08400005, 0x08404000, 0x0840502b, 0x0841b801, 0x0841e000, 0x0841f816,
    0x0842c01e, 0x0843c825, 0x08453808, 0x08470012, 0x0847a001, 0x0847d820,
    0x08490019, 0x084c0037, 0x084de013, 0x084e902e, 0x08508003, 0x0850a802,
    0x0850c81c, 0x08520008, 0x0853001e, 0x0854001f, 0x08560007, 0x0856481b,
    0x08575804, 0x08580035, 0x085a0015, 0x085ac01a, 0x085bc019, 0x085d4806,
    0x08600048, 0x08640032, 0x08660032, 0x0867d029, 0x08698009, 0x0873001e,
    0x08740029, 0x08758001, 0x08780027, 0x08798015, 0x087a8803, 0x087b8011,
    0x087d801b, 0x087f0016, 0x08801834, 0x0882901d, 0x08838801, 0x0883a800,
    0x0884182c, 0x08868018, 0x08878009, 0x08881823, 0x0889b009, 0x088a2000,
    0x088a3800, 0x088a8022, 0x088bb000, 0x088c182f, 0x088e0803, 0x088e800a,
    0x088ee000, 0x088f0813, 0x08900011, 0x08909818, 0x0891f801, 0x08940006,
    0x08944000, 0x08945003, 0x0894780e, 0x0894f809, 0x0895802e, 0x08978009,
    0x08982807, 0x08987801, 0x08989815, 0x08995006, 0x08999001, 0x0899a804,
    0x0899e800, 0x089a8000, 0x089ae804, 0x08a00034, 0x08a23803, 0x08a28009,
    0x08a2f802, 0x08a4002f, 0x08a62001, 0x08a63800, 0x08a68009, 0x08ac002e,
    0x08aec003, 0x08b0002f, 0x08b22000, 0x08b28009, 0x08b4002a, 0x08b5c000,
    0x08b60009, 0x08b8001a, 0x08b9800b, 0x08ba0006, 0x08c0002b, 0x08c50052,
    0x08c7f807, 0x08c84800, 0x08c86007, 0x08c8a801, 0x08c8c017, 0x08c9f800,
    0x08ca0800, 0x08ca8009, 0x08cd0007, 0x08cd5026, 0x08cf0800, 0x08cf1800,
    0x08d00000, 0x08d05827, 0x08d1d000, 0x08d28000, 0x08d2e02d, 0x08d4e800,
    0x08d58048, 0x08e00008, 0x08e05024, 0x08e20000, 0x08e2801c, 0x08e3901d,
    0x08e80006, 0x08e84001, 0x08e85825, 0x08ea3000, 0x08ea8009, 0x08eb0005,
    0x08eb3801, 0x08eb501f, 0x08ecc000, 0x08ed0009, 0x08f70012, 0x08f81000,
    0x08f8200c, 0x08f89021, 0x08fa8009, 0x08fd8000, 0x08fe0014, 0x09000399,
    0x0920006e, 0x092400c3, 0x097c8060, 0x0980042f, 0x09a20805, 0x0a200246,
    0x0b400238, 0x0b52001e, 0x0b530009, 0x0b53804e, 0x0b560009, 0x0b56801d,
    0x0b58002f, 0x0b5a0003, 0x0b5a8009, 0x0b5ad806, 0x0b5b1814, 0x0b5be812,
    0x0b720056, 0x0b78004a, 0x0b7a8000, 0x0b7c980c, 0x0b7f0001, 0x0b7f1800,
    0x0b800000, 0x0c3fb800, 0x0c4004d5, 0x0c680000, 0x0c684000, 0x0d7f8003,
    0x0d7fa806, 0x0d7fe801, 0x0d800122, 0x0d899000, 0x0d8a8002, 0x0d8aa800,
    0x0d8b2003, 0x0d8b818b, 0x0de0006a, 0x0de3800c, 0x0de40008, 0x0de48009,
    0x0e960013, 0x0e970013, 0x0e9b0018, 0x0ea00054, 0x0ea2b046, 0x0ea4f001,
    0x0ea51000, 0x0ea52801, 0x0ea54803, 0x0ea5700b, 0x0ea5d800, 0x0ea5e806,
    0x0ea62840, 0x0ea83803, 0x0ea86807, 0x0ea8b006, 0x0ea8f01b, 0x0ea9d803,
    0x0eaa0004, 0x0eaa3000, 0x0eaa5006, 0x0eaa9153, 0x0eb54018, 0x0eb61018,
    0x0eb6e01e, 0x0eb7e018, 0x0eb8b01e, 0x0eb9b018, 0x0eba801e, 0x0ebb8018,
    0x0ebc501e, 0x0ebd5018, 0x0ebe2007, 0x0ebe7031, 0x0ef8001e, 0x0ef92805,
    0x0f01803d, 0x0f08002c, 0x0f09b806, 0x0f0a0009, 0x0f0a7000, 0x0f14801d,
    0x0f16002b, 0x0f178009, 0x0f26801b, 0x0f278009, 0x0f3f0006, 0x0f3f4003,
    0x0f3f6801, 0x0f3f800e, 0x0f4000c4, 0x0f463808, 0x0f480043, 0x0f4a5800,
    0x0f4a8009, 0x0f63883a, 0x0f656802, 0x0f658803, 0x0f68082c, 0x0f69780e,
    0x0f700003, 0x0f70281a, 0x0f710801, 0x0f712000, 0x0f713800, 0x0f714809,
    0x0f71a003, 0x0f71c800, 0x0f71d800, 0x0f721000, 0x0f723800, 0x0f724800,
    0x0f725800, 0x0f726802, 0x0f728801, 0x0f72a000, 0x0f72b800, 0x0f72c800,
    0x0f72d800, 0x0f72e800, 0x0f72f800, 0x0f730801, 0x0f732000, 0x0f733803,
    0x0f736006, 0x0f73a003, 0x0f73c803, 0x0f73f000, 0x0f740009, 0x0f745810,
    0x0f750802, 0x0f752804, 0x0f755810, 0x0f88000c, 0x0f88801c, 0x0f898019,
    0x0f8a8019, 0x0f8b801a, 0x0f8d2800, 0x0f8f3019, 0x0fdf8009, 0x10000000,
    0x1536f800, 0x15380000, 0x15b9c800, 0x15ba0000, 0x15c0e800, 0x15c10000,
    0x16750800, 0x16758000, 0x175f0000, 0x17c0021d, 0x18000000, 0x189a5000,
    0x189a8000, 0x191d7800
  ];
  return c_int::from(wcbsearch(wc, &EXTENTS) >= 0);
}

#[no_mangle]
pub extern "C" fn ouma_iswalnum_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswalnum(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswalpha(wc: wint_t) -> c_int {
  return c_int::from((wc < 0x30 || wc > 0x39) && ouma_iswalnum(wc) > 0);
}

#[no_mangle]
pub extern "C" fn ouma_iswalpha_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswalpha(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswblank(wc: wint_t) -> c_int {
  return c_int::from(
    wc == 0x9 ||
      wc == 0x20 ||
      wc == 0x1680 ||
      (wc >= 0x2000 && wc <= 0x2006) ||
      (wc >= 0x2008 && wc <= 0x200a) ||
      wc == 0x205f ||
      wc == 0x3000
  );
}

#[no_mangle]
pub extern "C" fn ouma_iswblank_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswblank(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswcntrl(wc: wint_t) -> c_int {
  return c_int::from(
    (wc <= 0x1f) ||
      (wc >= 0x7f && wc <= 0x9f) ||
      (wc >= 0x2028 && wc <= 0x2029)
  );
}

#[no_mangle]
pub extern "C" fn ouma_iswcntrl_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswcntrl(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswctype(
  wc: wint_t,
  cc: wctype_t
) -> c_int {
  // TODO: add iswctype
  0
}

#[no_mangle]
pub extern "C" fn ouma_iswctype_l(
  wc: wint_t,
  cc: wctype_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswctype(wc, cc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswdigit(wc: wint_t) -> c_int {
  return c_int::from(wc >= 0x30 && wc <= 0x39);
}

#[no_mangle]
pub extern "C" fn ouma_iswdigit_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswdigit(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswgraph(wc: wint_t) -> c_int {
  const EXTENTS: [u32; 730] = [
    0x0001085d, 0x000502d7, 0x001bd005, 0x001c2006, 0x001c6000, 0x001c7013,
    0x001d198c, 0x00298825, 0x002ac831, 0x002c6802, 0x002c8836, 0x002e801a,
    0x002f7805, 0x0030010d, 0x0038783b, 0x003a6864, 0x003e003a, 0x003fe830,
    0x0041800e, 0x0042001b, 0x0042f000, 0x0043000a, 0x0043801e, 0x00448001,
    0x0044c0eb, 0x004c2807, 0x004c7801, 0x004c9815, 0x004d5006, 0x004d9000,
    0x004db003, 0x004de008, 0x004e3801, 0x004e5803, 0x004eb800, 0x004ee001,
    0x004ef804, 0x004f3018, 0x00500802, 0x00502805, 0x00507801, 0x00509815,
    0x00515006, 0x00519001, 0x0051a801, 0x0051c001, 0x0051e000, 0x0051f004,
    0x00523801, 0x00525802, 0x00528800, 0x0052c803, 0x0052f000, 0x00533010,
    0x00540802, 0x00542808, 0x00547802, 0x00549815, 0x00555006, 0x00559001,
    0x0055a804, 0x0055e009, 0x00563802, 0x00565802, 0x00568000, 0x00570003,
    0x0057300b, 0x0057c806, 0x00580802, 0x00582807, 0x00587801, 0x00589815,
    0x00595006, 0x00599001, 0x0059a804, 0x0059e008, 0x005a3801, 0x005a5802,
    0x005aa802, 0x005ae001, 0x005af804, 0x005b3011, 0x005c1001, 0x005c2805,
    0x005c7002, 0x005c9003, 0x005cc801, 0x005ce000, 0x005cf001, 0x005d1801,
    0x005d4002, 0x005d700b, 0x005df004, 0x005e3002, 0x005e5003, 0x005e8000,
    0x005eb800, 0x005f3014, 0x0060000c, 0x00607002, 0x00609016, 0x0061500f,
    0x0061e008, 0x00623002, 0x00625003, 0x0062a801, 0x0062c002, 0x0062e800,
    0x00630003, 0x00633009, 0x0063b815, 0x00647002, 0x00649016, 0x00655009,
    0x0065a804, 0x0065e008, 0x00663002, 0x00665003, 0x0066a801, 0x0066e801,
    0x00670003, 0x00673009, 0x00678802, 0x0068000c, 0x00687002, 0x00689032,
    0x006a3002, 0x006a5005, 0x006aa00f, 0x006b3019, 0x006c0802, 0x006c2811,
    0x006cd017, 0x006d9808, 0x006de800, 0x006e0006, 0x006e5000, 0x006e7805,
    0x006eb000, 0x006ec007, 0x006f3009, 0x006f9002, 0x00700839, 0x0071f81c,
    0x00740801, 0x00742000, 0x00743004, 0x00746017, 0x00752800, 0x00753816,
    0x00760004, 0x00763000, 0x00764006, 0x00768009, 0x0076e003, 0x00780047,
    0x007a4823, 0x007b8826, 0x007cc823, 0x007df00e, 0x007e700c, 0x008000c5,
    0x00863800, 0x00866800, 0x00868178, 0x00925003, 0x00928006, 0x0092c000,
    0x0092d003, 0x00930028, 0x00945003, 0x00948020, 0x00959003, 0x0095c006,
    0x00960000, 0x00961003, 0x0096400e, 0x0096c038, 0x00989003, 0x0098c042,
    0x009ae81f, 0x009c0019, 0x009d0055, 0x009fc005, 0x00a0027f, 0x00b4081b,
    0x00b50058, 0x00b80015, 0x00b8f817, 0x00ba0013, 0x00bb000c, 0x00bb7002,
    0x00bb9001, 0x00bc005d, 0x00bf0009, 0x00bf8009, 0x00c00019, 0x00c10058,
    0x00c4002a, 0x00c58045, 0x00c8001e, 0x00c9000b, 0x00c9800b, 0x00ca0000,
    0x00ca2029, 0x00cb8004, 0x00cc002b, 0x00cd8019, 0x00ce800a, 0x00cef03d,
    0x00d0f040, 0x00d3001c, 0x00d3f80a, 0x00d48009, 0x00d5000d, 0x00d5801e,
    0x00d8004c, 0x00da802e, 0x00dc0073, 0x00dfe03b, 0x00e1d80e, 0x00e2683b,
    0x00e4802a, 0x00e5e80a, 0x00e6802a, 0x00e80215, 0x00f8c005, 0x00f90025,
    0x00fa4005, 0x00fa8007, 0x00fac800, 0x00fad800, 0x00fae800, 0x00faf81e,
    0x00fc0034, 0x00fdb00e, 0x00fe300d, 0x00feb005, 0x00fee812, 0x00ff9002,
    0x00ffb008, 0x01003800, 0x0100581c, 0x01015034, 0x01030004, 0x0103300b,
    0x0103a01a, 0x0104800c, 0x01050020, 0x01068020, 0x0108008b, 0x010c8296,
    0x0122000a, 0x01230713, 0x015bb01f, 0x015cb95c, 0x0167c82c, 0x01693800,
    0x01696800, 0x01698037, 0x016b7801, 0x016bf817, 0x016d0006, 0x016d4006,
    0x016d8006, 0x016dc006, 0x016e0006, 0x016e4006, 0x016e8006, 0x016ec006,
    0x016f007d, 0x01740019, 0x0174d858, 0x017800d5, 0x017f800b, 0x0180083e,
    0x01820855, 0x0184c866, 0x0188282a, 0x0189885d, 0x018c8053, 0x018f802e,
    0x019101e0, 0x026df841, 0x04fffc8d, 0x05248036, 0x0526815b, 0x053200b7,
    0x053800ca, 0x053e8001, 0x053e9800, 0x053ea804, 0x053f903a, 0x05418009,
    0x05420037, 0x05440045, 0x0546700b, 0x05470073, 0x054af81d, 0x054c004d,
    0x054e780a, 0x054ef020, 0x05500036, 0x0552000d, 0x05528009, 0x0552e066,
    0x0556d81b, 0x05580805, 0x05584805, 0x05588805, 0x05590006, 0x05594006,
    0x0559803b, 0x055b807d, 0x055f8009, 0x05600000, 0x06bd1800, 0x06bd8016,
    0x06be5830, 0x06c00000, 0x06dbf801, 0x06dff801, 0x06fff801, 0x07c7f96e,
    0x07d38069, 0x07d80006, 0x07d89804, 0x07d8e819, 0x07d9c004, 0x07d9f000,
    0x07da0001, 0x07da1801, 0x07da307c, 0x07de99bc, 0x07ec9035, 0x07ee7800,
    0x07ef8029, 0x07f10032, 0x07f2a012, 0x07f34003, 0x07f38004, 0x07f3b086,
    0x07f7f800, 0x07f808bd, 0x07fe1005, 0x07fe5005, 0x07fe9005, 0x07fed002,
    0x07ff0006, 0x07ff4006, 0x07ffc804, 0x0800000b, 0x08006819, 0x08014012,
    0x0801e001, 0x0801f80e, 0x0802800d, 0x0804007a, 0x08080002, 0x0808382c,
    0x0809b857, 0x080c800c, 0x080d0000, 0x080e802d, 0x0814001c, 0x08150030,
    0x0817001b, 0x08180023, 0x0819681d, 0x081a802a, 0x081c001d, 0x081cf824,
    0x081e400d, 0x0820009d, 0x08250009, 0x08258023, 0x0826c023, 0x08280027,
    0x08298033, 0x082b780b, 0x082be00e, 0x082c6006, 0x082ca001, 0x082cb80a,
    0x082d180e, 0x082d9806, 0x082dd801, 0x08300136, 0x083a0015, 0x083b0007,
    0x083c0005, 0x083c3829, 0x083d9008, 0x08400005, 0x08404000, 0x0840502b,
    0x0841b801, 0x0841e000, 0x0841f816, 0x0842b847, 0x08453808, 0x08470012,
    0x0847a001, 0x0847d820, 0x0848f81a, 0x0849f800, 0x084c0037, 0x084de013,
    0x084e9031, 0x08502801, 0x08506007, 0x0850a802, 0x0850c81c, 0x0851c002,
    0x0851f809, 0x08528008, 0x0853003f, 0x08560026, 0x0857580b, 0x08580035,
    0x0859c81c, 0x085ac01a, 0x085bc019, 0x085cc803, 0x085d4806, 0x08600048,
    0x08640032, 0x08660032, 0x0867d02d, 0x08698009, 0x0873001e, 0x08740029,
    0x08755802, 0x08758001, 0x0877e82a, 0x08798029, 0x087b8019, 0x087d801b,
    0x087f0016, 0x0880004d, 0x08829023, 0x0883f843, 0x08866800, 0x08868018,
    0x08878009, 0x08880034, 0x0889b011, 0x088a8026, 0x088c005f, 0x088f0813,
    0x08900011, 0x0890982e, 0x08940006, 0x08944000, 0x08945003, 0x0894780e,
    0x0894f80a, 0x0895803a, 0x08978009, 0x08980003, 0x08982807, 0x08987801,
    0x08989815, 0x08995006, 0x08999001, 0x0899a804, 0x0899d809, 0x089a3801,
    0x089a5802, 0x089a8000, 0x089ab800, 0x089ae806, 0x089b3006, 0x089b8004,
    0x08a0005b, 0x08a2e804, 0x08a40047, 0x08a68009, 0x08ac0035, 0x08adc025,
    0x08b00044, 0x08b28009, 0x08b3000c, 0x08b40039, 0x08b60009, 0x08b8001a,
    0x08b8e80e, 0x08b98016, 0x08c0003b, 0x08c50052, 0x08c7f807, 0x08c84800,
    0x08c86007, 0x08c8a801, 0x08c8c01d, 0x08c9b801, 0x08c9d80b, 0x08ca8009,
    0x08cd0007, 0x08cd502d, 0x08ced00a, 0x08d00047, 0x08d28052, 0x08d58048,
    0x08d80009, 0x08e00008, 0x08e0502c, 0x08e1c00d, 0x08e2801c, 0x08e3801f,
    0x08e49015, 0x08e5480d, 0x08e80006, 0x08e84001, 0x08e8582b, 0x08e9d000,
    0x08e9e001, 0x08e9f808, 0x08ea8009, 0x08eb0005, 0x08eb3801, 0x08eb5024,
    0x08ec8001, 0x08ec9805, 0x08ed0009, 0x08f70018, 0x08f80010, 0x08f89028,
    0x08f9f01b, 0x08fd8000, 0x08fe0031, 0x08fffb9a, 0x0920006e, 0x09238004,
    0x092400c3, 0x097c8062, 0x09800455, 0x0a200246, 0x0b400238, 0x0b52001e,
    0x0b530009, 0x0b537050, 0x0b560009, 0x0b56801d, 0x0b578005, 0x0b580045,
    0x0b5a8009, 0x0b5ad806, 0x0b5b1814, 0x0b5be812, 0x0b72005a, 0x0b78004a,
    0x0b7a7838, 0x0b7c7810, 0x0b7f0004, 0x0b7f8001, 0x0b800000, 0x0c3fb800,
    0x0c4004d5, 0x0c680000, 0x0c684000, 0x0d7f8003, 0x0d7fa806, 0x0d7fe801,
    0x0d800122, 0x0d899000, 0x0d8a8002, 0x0d8aa800, 0x0d8b2003, 0x0d8b818b,
    0x0de0006a, 0x0de3800c, 0x0de40008, 0x0de48009, 0x0de4e007, 0x0e78002d,
    0x0e798016, 0x0e7a8073, 0x0e8000f5, 0x0e880026, 0x0e8948c1, 0x0e900045,
    0x0e960013, 0x0e970013, 0x0e980056, 0x0e9b0018, 0x0ea00054, 0x0ea2b046,
    0x0ea4f001, 0x0ea51000, 0x0ea52801, 0x0ea54803, 0x0ea5700b, 0x0ea5d800,
    0x0ea5e806, 0x0ea62840, 0x0ea83803, 0x0ea86807, 0x0ea8b006, 0x0ea8f01b,
    0x0ea9d803, 0x0eaa0004, 0x0eaa3000, 0x0eaa5006, 0x0eaa9153, 0x0eb54123,
    0x0ebe72bd, 0x0ed4d804, 0x0ed5080e, 0x0ef8001e, 0x0ef92805, 0x0f000006,
    0x0f004010, 0x0f00d806, 0x0f011801, 0x0f013004, 0x0f01803d, 0x0f047800,
    0x0f08002c, 0x0f09800d, 0x0f0a0009, 0x0f0a7001, 0x0f14801e, 0x0f160039,
    0x0f17f800, 0x0f268029, 0x0f3f0006, 0x0f3f4003, 0x0f3f6801, 0x0f3f800e,
    0x0f4000c4, 0x0f46380f, 0x0f48004b, 0x0f4a8009, 0x0f4af001, 0x0f638843,
    0x0f68083c, 0x0f700003, 0x0f70281a, 0x0f710801, 0x0f712000, 0x0f713800,
    0x0f714809, 0x0f71a003, 0x0f71c800, 0x0f71d800, 0x0f721000, 0x0f723800,
    0x0f724800, 0x0f725800, 0x0f726802, 0x0f728801, 0x0f72a000, 0x0f72b800,
    0x0f72c800, 0x0f72d800, 0x0f72e800, 0x0f72f800, 0x0f730801, 0x0f732000,
    0x0f733803, 0x0f736006, 0x0f73a003, 0x0f73c803, 0x0f73f000, 0x0f740009,
    0x0f745810, 0x0f750802, 0x0f752804, 0x0f755810, 0x0f778001, 0x0f80002b,
    0x0f818063, 0x0f85000e, 0x0f85880e, 0x0f86080e, 0x0f868824, 0x0f8800ad,
    0x0f8f301c, 0x0f90802b, 0x0f920008, 0x0f928001, 0x0f930005, 0x0f9803d7,
    0x0fb6e010, 0x0fb7800c, 0x0fb80076, 0x0fbbd85e, 0x0fbf000b, 0x0fbf8000,
    0x0fc0000b, 0x0fc08037, 0x0fc28009, 0x0fc30027, 0x0fc4801d, 0x0fc58001,
    0x0fc80153, 0x0fd3000d, 0x0fd3800c, 0x0fd40008, 0x0fd4802d, 0x0fd5f806,
    0x0fd6700d, 0x0fd70008, 0x0fd78008, 0x0fd80092, 0x0fdca036, 0x0fdf8009,
    0x10000000, 0x1536f800, 0x15380000, 0x15b9c800, 0x15ba0000, 0x15c0e800,
    0x15c10000, 0x16750800, 0x16758000, 0x175f0000, 0x17c0021d, 0x18000000,
    0x189a5000, 0x189a8000, 0x191d7800, 0x70000800, 0x7001005f, 0x700800ef,
    0x78000000, 0x7fffe800, 0x80000000, 0x87ffe800
  ];
  return c_int::from(wcbsearch(wc, &EXTENTS) >= 0);
}

#[no_mangle]
pub extern "C" fn ouma_iswgraph_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswgraph(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswlower(wc: wint_t) -> c_int {
  const EXTENTS: [u32; 627] = [
    0x00030819, 0x0005a800, 0x00070016, 0x0007c007, 0x00080800, 0x00081800,
    0x00082800, 0x00083800, 0x00084800, 0x00085800, 0x00086800, 0x00087800,
    0x00088800, 0x00089800, 0x0008a800, 0x0008b800, 0x0008c800, 0x0008d800,
    0x0008e800, 0x0008f800, 0x00090800, 0x00091800, 0x00092800, 0x00093800,
    0x00094800, 0x00095800, 0x00096800, 0x00097800, 0x00098800, 0x00099800,
    0x0009a800, 0x0009b800, 0x0009d000, 0x0009e000, 0x0009f000, 0x000a0000,
    0x000a1000, 0x000a2000, 0x000a3000, 0x000a4000, 0x000a5800, 0x000a6800,
    0x000a7800, 0x000a8800, 0x000a9800, 0x000aa800, 0x000ab800, 0x000ac800,
    0x000ad800, 0x000ae800, 0x000af800, 0x000b0800, 0x000b1800, 0x000b2800,
    0x000b3800, 0x000b4800, 0x000b5800, 0x000b6800, 0x000b7800, 0x000b8800,
    0x000b9800, 0x000ba800, 0x000bb800, 0x000bd000, 0x000be000, 0x000bf002,
    0x000c1800, 0x000c2800, 0x000c4000, 0x000c6000, 0x000c9000, 0x000ca800,
    0x000cc801, 0x000cf000, 0x000d0800, 0x000d1800, 0x000d2800, 0x000d4000,
    0x000d6800, 0x000d8000, 0x000da000, 0x000db000, 0x000dc800, 0x000de800,
    0x000df800, 0x000e2801, 0x000e4001, 0x000e5801, 0x000e7000, 0x000e8000,
    0x000e9000, 0x000ea000, 0x000eb000, 0x000ec000, 0x000ed000, 0x000ee001,
    0x000ef800, 0x000f0800, 0x000f1800, 0x000f2800, 0x000f3800, 0x000f4800,
    0x000f5800, 0x000f6800, 0x000f7800, 0x000f9001, 0x000fa800, 0x000fc800,
    0x000fd800, 0x000fe800, 0x000ff800, 0x00100800, 0x00101800, 0x00102800,
    0x00103800, 0x00104800, 0x00105800, 0x00106800, 0x00107800, 0x00108800,
    0x00109800, 0x0010a800, 0x0010b800, 0x0010c800, 0x0010d800, 0x0010e800,
    0x0010f800, 0x00111800, 0x00112800, 0x00113800, 0x00114800, 0x00115800,
    0x00116800, 0x00117800, 0x00118800, 0x00119800, 0x0011e000, 0x0011f801,
    0x00121000, 0x00123800, 0x00124800, 0x00125800, 0x00126800, 0x00127805,
    0x0012b001, 0x0012c800, 0x0012d801, 0x00130001, 0x00131800, 0x00132801,
    0x00134004, 0x00137800, 0x00138801, 0x0013a800, 0x0013e800, 0x00140000,
    0x00141001, 0x00143805, 0x00149000, 0x0014e801, 0x001a2800, 0x001b8800,
    0x001b9800, 0x001bb800, 0x001bd802, 0x001d6003, 0x001d881d, 0x001e8001,
    0x001ea802, 0x001ec800, 0x001ed800, 0x001ee800, 0x001ef800, 0x001f0800,
    0x001f1800, 0x001f2800, 0x001f3800, 0x001f4800, 0x001f5800, 0x001f6800,
    0x001f7804, 0x001fa800, 0x001fc000, 0x001fd800, 0x0021802f, 0x00230800,
    0x00231800, 0x00232800, 0x00233800, 0x00234800, 0x00235800, 0x00236800,
    0x00237800, 0x00238800, 0x00239800, 0x0023a800, 0x0023b800, 0x0023c800,
    0x0023d800, 0x0023e800, 0x0023f800, 0x00240800, 0x00245800, 0x00246800,
    0x00247800, 0x00248800, 0x00249800, 0x0024a800, 0x0024b800, 0x0024c800,
    0x0024d800, 0x0024e800, 0x0024f800, 0x00250800, 0x00251800, 0x00252800,
    0x00253800, 0x00254800, 0x00255800, 0x00256800, 0x00257800, 0x00258800,
    0x00259800, 0x0025a800, 0x0025b800, 0x0025c800, 0x0025d800, 0x0025e800,
    0x0025f800, 0x00261000, 0x00262000, 0x00263000, 0x00264000, 0x00265000,
    0x00266000, 0x00267001, 0x00268800, 0x00269800, 0x0026a800, 0x0026b800,
    0x0026c800, 0x0026d800, 0x0026e800, 0x0026f800, 0x00270800, 0x00271800,
    0x00272800, 0x00273800, 0x00274800, 0x00275800, 0x00276800, 0x00277800,
    0x00278800, 0x00279800, 0x0027a800, 0x0027b800, 0x0027c800, 0x0027d800,
    0x0027e800, 0x0027f800, 0x00280800, 0x00281800, 0x00282800, 0x00283800,
    0x00284800, 0x00285800, 0x00286800, 0x00287800, 0x00288800, 0x00289800,
    0x0028a800, 0x0028b800, 0x0028c800, 0x0028d800, 0x0028e800, 0x0028f800,
    0x00290800, 0x00291800, 0x00292800, 0x00293800, 0x00294800, 0x00295800,
    0x00296800, 0x00297800, 0x002b0825, 0x0086802a, 0x0087e802, 0x009fc005,
    0x00e40008, 0x00ebc800, 0x00ebe800, 0x00ec7000, 0x00f00800, 0x00f01800,
    0x00f02800, 0x00f03800, 0x00f04800, 0x00f05800, 0x00f06800, 0x00f07800,
    0x00f08800, 0x00f09800, 0x00f0a800, 0x00f0b800, 0x00f0c800, 0x00f0d800,
    0x00f0e800, 0x00f0f800, 0x00f10800, 0x00f11800, 0x00f12800, 0x00f13800,
    0x00f14800, 0x00f15800, 0x00f16800, 0x00f17800, 0x00f18800, 0x00f19800,
    0x00f1a800, 0x00f1b800, 0x00f1c800, 0x00f1d800, 0x00f1e800, 0x00f1f800,
    0x00f20800, 0x00f21800, 0x00f22800, 0x00f23800, 0x00f24800, 0x00f25800,
    0x00f26800, 0x00f27800, 0x00f28800, 0x00f29800, 0x00f2a800, 0x00f2b800,
    0x00f2c800, 0x00f2d800, 0x00f2e800, 0x00f2f800, 0x00f30800, 0x00f31800,
    0x00f32800, 0x00f33800, 0x00f34800, 0x00f35800, 0x00f36800, 0x00f37800,
    0x00f38800, 0x00f39800, 0x00f3a800, 0x00f3b800, 0x00f3c800, 0x00f3d800,
    0x00f3e800, 0x00f3f800, 0x00f40800, 0x00f41800, 0x00f42800, 0x00f43800,
    0x00f44800, 0x00f45800, 0x00f46800, 0x00f47800, 0x00f48800, 0x00f49800,
    0x00f4a800, 0x00f4d800, 0x00f50800, 0x00f51800, 0x00f52800, 0x00f53800,
    0x00f54800, 0x00f55800, 0x00f56800, 0x00f57800, 0x00f58800, 0x00f59800,
    0x00f5a800, 0x00f5b800, 0x00f5c800, 0x00f5d800, 0x00f5e800, 0x00f5f800,
    0x00f60800, 0x00f61800, 0x00f62800, 0x00f63800, 0x00f64800, 0x00f65800,
    0x00f66800, 0x00f67800, 0x00f68800, 0x00f69800, 0x00f6a800, 0x00f6b800,
    0x00f6c800, 0x00f6d800, 0x00f6e800, 0x00f6f800, 0x00f70800, 0x00f71800,
    0x00f72800, 0x00f73800, 0x00f74800, 0x00f75800, 0x00f76800, 0x00f77800,
    0x00f78800, 0x00f79800, 0x00f7a800, 0x00f7b800, 0x00f7c800, 0x00f7d800,
    0x00f7e800, 0x00f7f808, 0x00f88005, 0x00f90007, 0x00f98007, 0x00fa0005,
    0x00fa8800, 0x00fa9800, 0x00faa800, 0x00fab800, 0x00fb0007, 0x00fb800d,
    0x00fc0007, 0x00fc8007, 0x00fd0007, 0x00fd8001, 0x00fd9800, 0x00fdf000,
    0x00fe1800, 0x00fe8001, 0x00ff0001, 0x00ff2800, 0x00ff9800, 0x010a7000,
    0x010b800f, 0x010c2000, 0x01268019, 0x0161802f, 0x01630800, 0x01632801,
    0x01634000, 0x01635000, 0x01636000, 0x01639800, 0x0163b000, 0x01640800,
    0x01641800, 0x01642800, 0x01643800, 0x01644800, 0x01645800, 0x01646800,
    0x01647800, 0x01648800, 0x01649800, 0x0164a800, 0x0164b800, 0x0164c800,
    0x0164d800, 0x0164e800, 0x0164f800, 0x01650800, 0x01651800, 0x01652800,
    0x01653800, 0x01654800, 0x01655800, 0x01656800, 0x01657800, 0x01658800,
    0x01659800, 0x0165a800, 0x0165b800, 0x0165c800, 0x0165d800, 0x0165e800,
    0x0165f800, 0x01660800, 0x01661800, 0x01662800, 0x01663800, 0x01664800,
    0x01665800, 0x01666800, 0x01667800, 0x01668800, 0x01669800, 0x0166a800,
    0x0166b800, 0x0166c800, 0x0166d800, 0x0166e800, 0x0166f800, 0x01670800,
    0x01671800, 0x01676000, 0x01677000, 0x01679800, 0x01680025, 0x01693800,
    0x01696800, 0x05320800, 0x05321800, 0x05322800, 0x05323800, 0x05324800,
    0x05325800, 0x05326800, 0x05327800, 0x05328800, 0x05329800, 0x0532a800,
    0x0532b800, 0x0532c800, 0x0532d800, 0x0532e800, 0x0532f800, 0x05330800,
    0x05331800, 0x05332800, 0x05333800, 0x05334800, 0x05335800, 0x05336800,
    0x05340800, 0x05341800, 0x05342800, 0x05343800, 0x05344800, 0x05345800,
    0x05346800, 0x05347800, 0x05348800, 0x05349800, 0x0534a800, 0x0534b800,
    0x0534c800, 0x0534d800, 0x05391800, 0x05392800, 0x05393800, 0x05394800,
    0x05395800, 0x05396800, 0x05397800, 0x05399800, 0x0539a800, 0x0539b800,
    0x0539c800, 0x0539d800, 0x0539e800, 0x0539f800, 0x053a0800, 0x053a1800,
    0x053a2800, 0x053a3800, 0x053a4800, 0x053a5800, 0x053a6800, 0x053a7800,
    0x053a8800, 0x053a9800, 0x053aa800, 0x053ab800, 0x053ac800, 0x053ad800,
    0x053ae800, 0x053af800, 0x053b0800, 0x053b1800, 0x053b2800, 0x053b3800,
    0x053b4800, 0x053b5800, 0x053b6800, 0x053b7800, 0x053bd000, 0x053be000,
    0x053bf800, 0x053c0800, 0x053c1800, 0x053c2800, 0x053c3800, 0x053c6000,
    0x053c8800, 0x053c9801, 0x053cb800, 0x053cc800, 0x053cd800, 0x053ce800,
    0x053cf800, 0x053d0800, 0x053d1800, 0x053d2800, 0x053d3800, 0x053d4800,
    0x053da800, 0x053db800, 0x053dc800, 0x053dd800, 0x053de800, 0x053df800,
    0x053e0800, 0x053e1800, 0x053e4000, 0x053e5000, 0x053e8800, 0x053eb800,
    0x053ec800, 0x053fb000, 0x055a9800, 0x055b804f, 0x07fa0819, 0x08214027,
    0x0826c023, 0x082cb80a, 0x082d180e, 0x082d9806, 0x082dd801, 0x08660032,
    0x08c6001f, 0x0b73001f, 0x0f491021
  ];
  return c_int::from(wcbsearch(wc, &EXTENTS) >= 0);
}

#[no_mangle]
pub extern "C" fn ouma_iswlower_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswlower(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswprint(wc: wint_t) -> c_int {
  const EXTENTS: [u32; 727] = [
    0x0001005e, 0x000502d7, 0x001bd005, 0x001c2006, 0x001c6000, 0x001c7013,
    0x001d198c, 0x00298825, 0x002ac831, 0x002c6802, 0x002c8836, 0x002e801a,
    0x002f7805, 0x0030010d, 0x0038783b, 0x003a6864, 0x003e003a, 0x003fe830,
    0x0041800e, 0x0042001b, 0x0042f000, 0x0043000a, 0x0043801e, 0x00448001,
    0x0044c0eb, 0x004c2807, 0x004c7801, 0x004c9815, 0x004d5006, 0x004d9000,
    0x004db003, 0x004de008, 0x004e3801, 0x004e5803, 0x004eb800, 0x004ee001,
    0x004ef804, 0x004f3018, 0x00500802, 0x00502805, 0x00507801, 0x00509815,
    0x00515006, 0x00519001, 0x0051a801, 0x0051c001, 0x0051e000, 0x0051f004,
    0x00523801, 0x00525802, 0x00528800, 0x0052c803, 0x0052f000, 0x00533010,
    0x00540802, 0x00542808, 0x00547802, 0x00549815, 0x00555006, 0x00559001,
    0x0055a804, 0x0055e009, 0x00563802, 0x00565802, 0x00568000, 0x00570003,
    0x0057300b, 0x0057c806, 0x00580802, 0x00582807, 0x00587801, 0x00589815,
    0x00595006, 0x00599001, 0x0059a804, 0x0059e008, 0x005a3801, 0x005a5802,
    0x005aa802, 0x005ae001, 0x005af804, 0x005b3011, 0x005c1001, 0x005c2805,
    0x005c7002, 0x005c9003, 0x005cc801, 0x005ce000, 0x005cf001, 0x005d1801,
    0x005d4002, 0x005d700b, 0x005df004, 0x005e3002, 0x005e5003, 0x005e8000,
    0x005eb800, 0x005f3014, 0x0060000c, 0x00607002, 0x00609016, 0x0061500f,
    0x0061e008, 0x00623002, 0x00625003, 0x0062a801, 0x0062c002, 0x0062e800,
    0x00630003, 0x00633009, 0x0063b815, 0x00647002, 0x00649016, 0x00655009,
    0x0065a804, 0x0065e008, 0x00663002, 0x00665003, 0x0066a801, 0x0066e801,
    0x00670003, 0x00673009, 0x00678802, 0x0068000c, 0x00687002, 0x00689032,
    0x006a3002, 0x006a5005, 0x006aa00f, 0x006b3019, 0x006c0802, 0x006c2811,
    0x006cd017, 0x006d9808, 0x006de800, 0x006e0006, 0x006e5000, 0x006e7805,
    0x006eb000, 0x006ec007, 0x006f3009, 0x006f9002, 0x00700839, 0x0071f81c,
    0x00740801, 0x00742000, 0x00743004, 0x00746017, 0x00752800, 0x00753816,
    0x00760004, 0x00763000, 0x00764006, 0x00768009, 0x0076e003, 0x00780047,
    0x007a4823, 0x007b8826, 0x007cc823, 0x007df00e, 0x007e700c, 0x008000c5,
    0x00863800, 0x00866800, 0x00868178, 0x00925003, 0x00928006, 0x0092c000,
    0x0092d003, 0x00930028, 0x00945003, 0x00948020, 0x00959003, 0x0095c006,
    0x00960000, 0x00961003, 0x0096400e, 0x0096c038, 0x00989003, 0x0098c042,
    0x009ae81f, 0x009c0019, 0x009d0055, 0x009fc005, 0x00a0029c, 0x00b50058,
    0x00b80015, 0x00b8f817, 0x00ba0013, 0x00bb000c, 0x00bb7002, 0x00bb9001,
    0x00bc005d, 0x00bf0009, 0x00bf8009, 0x00c00019, 0x00c10058, 0x00c4002a,
    0x00c58045, 0x00c8001e, 0x00c9000b, 0x00c9800b, 0x00ca0000, 0x00ca2029,
    0x00cb8004, 0x00cc002b, 0x00cd8019, 0x00ce800a, 0x00cef03d, 0x00d0f040,
    0x00d3001c, 0x00d3f80a, 0x00d48009, 0x00d5000d, 0x00d5801e, 0x00d8004c,
    0x00da802e, 0x00dc0073, 0x00dfe03b, 0x00e1d80e, 0x00e2683b, 0x00e4802a,
    0x00e5e80a, 0x00e6802a, 0x00e80215, 0x00f8c005, 0x00f90025, 0x00fa4005,
    0x00fa8007, 0x00fac800, 0x00fad800, 0x00fae800, 0x00faf81e, 0x00fc0034,
    0x00fdb00e, 0x00fe300d, 0x00feb005, 0x00fee812, 0x00ff9002, 0x00ffb008,
    0x01000027, 0x0101503a, 0x0103300b, 0x0103a01a, 0x0104800c, 0x01050020,
    0x01068020, 0x0108008b, 0x010c8296, 0x0122000a, 0x01230713, 0x015bb01f,
    0x015cb95c, 0x0167c82c, 0x01693800, 0x01696800, 0x01698037, 0x016b7801,
    0x016bf817, 0x016d0006, 0x016d4006, 0x016d8006, 0x016dc006, 0x016e0006,
    0x016e4006, 0x016e8006, 0x016ec006, 0x016f007d, 0x01740019, 0x0174d858,
    0x017800d5, 0x017f800b, 0x0180003f, 0x01820855, 0x0184c866, 0x0188282a,
    0x0189885d, 0x018c8053, 0x018f802e, 0x019101e0, 0x026df841, 0x04fffc8d,
    0x05248036, 0x0526815b, 0x053200b7, 0x053800ca, 0x053e8001, 0x053e9800,
    0x053ea804, 0x053f903a, 0x05418009, 0x05420037, 0x05440045, 0x0546700b,
    0x05470073, 0x054af81d, 0x054c004d, 0x054e780a, 0x054ef020, 0x05500036,
    0x0552000d, 0x05528009, 0x0552e066, 0x0556d81b, 0x05580805, 0x05584805,
    0x05588805, 0x05590006, 0x05594006, 0x0559803b, 0x055b807d, 0x055f8009,
    0x05600000, 0x06bd1800, 0x06bd8016, 0x06be5830, 0x06c00000, 0x06dbf801,
    0x06dff801, 0x06fff801, 0x07c7f96e, 0x07d38069, 0x07d80006, 0x07d89804,
    0x07d8e819, 0x07d9c004, 0x07d9f000, 0x07da0001, 0x07da1801, 0x07da307c,
    0x07de99bc, 0x07ec9035, 0x07ee7800, 0x07ef8029, 0x07f10032, 0x07f2a012,
    0x07f34003, 0x07f38004, 0x07f3b086, 0x07f7f800, 0x07f808bd, 0x07fe1005,
    0x07fe5005, 0x07fe9005, 0x07fed002, 0x07ff0006, 0x07ff4006, 0x07ffc804,
    0x0800000b, 0x08006819, 0x08014012, 0x0801e001, 0x0801f80e, 0x0802800d,
    0x0804007a, 0x08080002, 0x0808382c, 0x0809b857, 0x080c800c, 0x080d0000,
    0x080e802d, 0x0814001c, 0x08150030, 0x0817001b, 0x08180023, 0x0819681d,
    0x081a802a, 0x081c001d, 0x081cf824, 0x081e400d, 0x0820009d, 0x08250009,
    0x08258023, 0x0826c023, 0x08280027, 0x08298033, 0x082b780b, 0x082be00e,
    0x082c6006, 0x082ca001, 0x082cb80a, 0x082d180e, 0x082d9806, 0x082dd801,
    0x08300136, 0x083a0015, 0x083b0007, 0x083c0005, 0x083c3829, 0x083d9008,
    0x08400005, 0x08404000, 0x0840502b, 0x0841b801, 0x0841e000, 0x0841f816,
    0x0842b847, 0x08453808, 0x08470012, 0x0847a001, 0x0847d820, 0x0848f81a,
    0x0849f800, 0x084c0037, 0x084de013, 0x084e9031, 0x08502801, 0x08506007,
    0x0850a802, 0x0850c81c, 0x0851c002, 0x0851f809, 0x08528008, 0x0853003f,
    0x08560026, 0x0857580b, 0x08580035, 0x0859c81c, 0x085ac01a, 0x085bc019,
    0x085cc803, 0x085d4806, 0x08600048, 0x08640032, 0x08660032, 0x0867d02d,
    0x08698009, 0x0873001e, 0x08740029, 0x08755802, 0x08758001, 0x0877e82a,
    0x08798029, 0x087b8019, 0x087d801b, 0x087f0016, 0x0880004d, 0x08829023,
    0x0883f843, 0x08866800, 0x08868018, 0x08878009, 0x08880034, 0x0889b011,
    0x088a8026, 0x088c005f, 0x088f0813, 0x08900011, 0x0890982e, 0x08940006,
    0x08944000, 0x08945003, 0x0894780e, 0x0894f80a, 0x0895803a, 0x08978009,
    0x08980003, 0x08982807, 0x08987801, 0x08989815, 0x08995006, 0x08999001,
    0x0899a804, 0x0899d809, 0x089a3801, 0x089a5802, 0x089a8000, 0x089ab800,
    0x089ae806, 0x089b3006, 0x089b8004, 0x08a0005b, 0x08a2e804, 0x08a40047,
    0x08a68009, 0x08ac0035, 0x08adc025, 0x08b00044, 0x08b28009, 0x08b3000c,
    0x08b40039, 0x08b60009, 0x08b8001a, 0x08b8e80e, 0x08b98016, 0x08c0003b,
    0x08c50052, 0x08c7f807, 0x08c84800, 0x08c86007, 0x08c8a801, 0x08c8c01d,
    0x08c9b801, 0x08c9d80b, 0x08ca8009, 0x08cd0007, 0x08cd502d, 0x08ced00a,
    0x08d00047, 0x08d28052, 0x08d58048, 0x08d80009, 0x08e00008, 0x08e0502c,
    0x08e1c00d, 0x08e2801c, 0x08e3801f, 0x08e49015, 0x08e5480d, 0x08e80006,
    0x08e84001, 0x08e8582b, 0x08e9d000, 0x08e9e001, 0x08e9f808, 0x08ea8009,
    0x08eb0005, 0x08eb3801, 0x08eb5024, 0x08ec8001, 0x08ec9805, 0x08ed0009,
    0x08f70018, 0x08f80010, 0x08f89028, 0x08f9f01b, 0x08fd8000, 0x08fe0031,
    0x08fffb9a, 0x0920006e, 0x09238004, 0x092400c3, 0x097c8062, 0x09800455,
    0x0a200246, 0x0b400238, 0x0b52001e, 0x0b530009, 0x0b537050, 0x0b560009,
    0x0b56801d, 0x0b578005, 0x0b580045, 0x0b5a8009, 0x0b5ad806, 0x0b5b1814,
    0x0b5be812, 0x0b72005a, 0x0b78004a, 0x0b7a7838, 0x0b7c7810, 0x0b7f0004,
    0x0b7f8001, 0x0b800000, 0x0c3fb800, 0x0c4004d5, 0x0c680000, 0x0c684000,
    0x0d7f8003, 0x0d7fa806, 0x0d7fe801, 0x0d800122, 0x0d899000, 0x0d8a8002,
    0x0d8aa800, 0x0d8b2003, 0x0d8b818b, 0x0de0006a, 0x0de3800c, 0x0de40008,
    0x0de48009, 0x0de4e007, 0x0e78002d, 0x0e798016, 0x0e7a8073, 0x0e8000f5,
    0x0e880026, 0x0e8948c1, 0x0e900045, 0x0e960013, 0x0e970013, 0x0e980056,
    0x0e9b0018, 0x0ea00054, 0x0ea2b046, 0x0ea4f001, 0x0ea51000, 0x0ea52801,
    0x0ea54803, 0x0ea5700b, 0x0ea5d800, 0x0ea5e806, 0x0ea62840, 0x0ea83803,
    0x0ea86807, 0x0ea8b006, 0x0ea8f01b, 0x0ea9d803, 0x0eaa0004, 0x0eaa3000,
    0x0eaa5006, 0x0eaa9153, 0x0eb54123, 0x0ebe72bd, 0x0ed4d804, 0x0ed5080e,
    0x0ef8001e, 0x0ef92805, 0x0f000006, 0x0f004010, 0x0f00d806, 0x0f011801,
    0x0f013004, 0x0f01803d, 0x0f047800, 0x0f08002c, 0x0f09800d, 0x0f0a0009,
    0x0f0a7001, 0x0f14801e, 0x0f160039, 0x0f17f800, 0x0f268029, 0x0f3f0006,
    0x0f3f4003, 0x0f3f6801, 0x0f3f800e, 0x0f4000c4, 0x0f46380f, 0x0f48004b,
    0x0f4a8009, 0x0f4af001, 0x0f638843, 0x0f68083c, 0x0f700003, 0x0f70281a,
    0x0f710801, 0x0f712000, 0x0f713800, 0x0f714809, 0x0f71a003, 0x0f71c800,
    0x0f71d800, 0x0f721000, 0x0f723800, 0x0f724800, 0x0f725800, 0x0f726802,
    0x0f728801, 0x0f72a000, 0x0f72b800, 0x0f72c800, 0x0f72d800, 0x0f72e800,
    0x0f72f800, 0x0f730801, 0x0f732000, 0x0f733803, 0x0f736006, 0x0f73a003,
    0x0f73c803, 0x0f73f000, 0x0f740009, 0x0f745810, 0x0f750802, 0x0f752804,
    0x0f755810, 0x0f778001, 0x0f80002b, 0x0f818063, 0x0f85000e, 0x0f85880e,
    0x0f86080e, 0x0f868824, 0x0f8800ad, 0x0f8f301c, 0x0f90802b, 0x0f920008,
    0x0f928001, 0x0f930005, 0x0f9803d7, 0x0fb6e010, 0x0fb7800c, 0x0fb80076,
    0x0fbbd85e, 0x0fbf000b, 0x0fbf8000, 0x0fc0000b, 0x0fc08037, 0x0fc28009,
    0x0fc30027, 0x0fc4801d, 0x0fc58001, 0x0fc80153, 0x0fd3000d, 0x0fd3800c,
    0x0fd40008, 0x0fd4802d, 0x0fd5f806, 0x0fd6700d, 0x0fd70008, 0x0fd78008,
    0x0fd80092, 0x0fdca036, 0x0fdf8009, 0x10000000, 0x1536f800, 0x15380000,
    0x15b9c800, 0x15ba0000, 0x15c0e800, 0x15c10000, 0x16750800, 0x16758000,
    0x175f0000, 0x17c0021d, 0x18000000, 0x189a5000, 0x189a8000, 0x191d7800,
    0x70000800, 0x7001005f, 0x700800ef, 0x78000000, 0x7fffe800, 0x80000000,
    0x87ffe800
  ];
  return c_int::from(wcbsearch(wc, &EXTENTS) >= 0);
}

#[no_mangle]
pub extern "C" fn ouma_iswprint_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswprint(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswpunct(wc: wint_t) -> c_int {
  const EXTENTS: [u32; 558] = [
    0x0001080e, 0x0001d006, 0x0002d805, 0x0003d803, 0x00050009, 0x00055806,
    0x0005a000, 0x0005b002, 0x0005d800, 0x0005f800, 0x0006b800, 0x0007b800,
    0x00161003, 0x0016900d, 0x00172806, 0x00176800, 0x00177855, 0x001a3029,
    0x001ba800, 0x001bf000, 0x001c2001, 0x001c3800, 0x001fb000, 0x00241007,
    0x002ad005, 0x002c4801, 0x002c6802, 0x002c8836, 0x002f9801, 0x0030001f,
    0x00325814, 0x00335003, 0x00338000, 0x0036a000, 0x0036b00e, 0x00373806,
    0x0037e801, 0x0038000d, 0x00387800, 0x00388800, 0x0039801a, 0x003d300a,
    0x003f5808, 0x003fb003, 0x003fe802, 0x0040b003, 0x0040d808, 0x00412802,
    0x00414804, 0x0041800e, 0x0042c802, 0x0042f000, 0x00444000, 0x00448001,
    0x0044c007, 0x00465039, 0x0049d002, 0x0049f011, 0x004a8806, 0x004b1003,
    0x004b8000, 0x004c0802, 0x004de000, 0x004df006, 0x004e3801, 0x004e5802,
    0x004eb800, 0x004f1001, 0x004f9001, 0x004fd001, 0x004fe801, 0x00500802,
    0x0051e000, 0x0051f004, 0x00523801, 0x00525802, 0x00528800, 0x00538001,
    0x0053a801, 0x00540802, 0x0055e000, 0x0055f007, 0x00563802, 0x00565802,
    0x00571001, 0x00578001, 0x0057d005, 0x00580802, 0x0059e000, 0x0059f006,
    0x005a3801, 0x005a5802, 0x005aa802, 0x005b1001, 0x005b8000, 0x005c1000,
    0x005df004, 0x005e3002, 0x005e5003, 0x005eb800, 0x005f9807, 0x00600004,
    0x0061e000, 0x0061f006, 0x00623002, 0x00625003, 0x0062a801, 0x00631001,
    0x0063b800, 0x0063f800, 0x00640803, 0x0065e000, 0x0065f006, 0x00663002,
    0x00665003, 0x0066a801, 0x00671001, 0x00679800, 0x00680003, 0x0069d801,
    0x0069f006, 0x006a3002, 0x006a5003, 0x006a7800, 0x006ab800, 0x006b1001,
    0x006bc800, 0x006c0802, 0x006e5000, 0x006e7805, 0x006eb000, 0x006ec007,
    0x006f9002, 0x00718800, 0x0071a006, 0x0071f800, 0x00723808, 0x0072d001,
    0x00758800, 0x0075a008, 0x00764006, 0x0078081e, 0x0079a00b, 0x007b8816,
    0x007c680a, 0x007cc823, 0x007df00e, 0x007e700c, 0x00815813, 0x00825005,
    0x0082b003, 0x0082f002, 0x00831002, 0x00833806, 0x00838803, 0x0084100b,
    0x00847800, 0x0084d005, 0x0087d800, 0x009ae80b, 0x009c8009, 0x00a00000,
    0x00b36801, 0x00b4d801, 0x00b75802, 0x00b89003, 0x00b99004, 0x00ba9001,
    0x00bb9001, 0x00bda022, 0x00bec003, 0x00bee800, 0x00c0000f, 0x00c42801,
    0x00c54800, 0x00c9000b, 0x00c9800b, 0x00ca0000, 0x00ca2001, 0x00cef021,
    0x00d0b804, 0x00d0f001, 0x00d2a809, 0x00d3001c, 0x00d3f800, 0x00d50006,
    0x00d54005, 0x00d5801e, 0x00d80004, 0x00d9a010, 0x00dad024, 0x00dc0002,
    0x00dd080c, 0x00df300d, 0x00dfe003, 0x00e12013, 0x00e1d804, 0x00e3f001,
    0x00e60007, 0x00e68018, 0x00e76800, 0x00e7a000, 0x00e7b802, 0x00ee003f,
    0x00fde800, 0x00fdf802, 0x00fe6802, 0x00fee802, 0x00ff6802, 0x00ffe801,
    0x01003800, 0x0100581c, 0x01015034, 0x01030004, 0x01033009, 0x0103d004,
    0x01045004, 0x01050020, 0x01068020, 0x01080001, 0x01081803, 0x01084001,
    0x0108a000, 0x0108b002, 0x0108f005, 0x01092800, 0x01093800, 0x01097000,
    0x0109d001, 0x010a0004, 0x010a5003, 0x010a7800, 0x010c5001, 0x010c8296,
    0x0122000a, 0x01280275, 0x013ca3df, 0x015bb01f, 0x015cb868, 0x01672805,
    0x01677802, 0x0167c803, 0x0167f001, 0x016b8000, 0x016bf800, 0x016f004e,
    0x0171802d, 0x01740019, 0x0174d858, 0x017800d5, 0x017f800b, 0x01800803,
    0x01804018, 0x01815006, 0x0181b001, 0x0181e802, 0x0184c803, 0x01850000,
    0x0187d800, 0x018c8001, 0x018cb009, 0x018e0023, 0x0190001e, 0x0191501d,
    0x01928000, 0x0193001f, 0x01945026, 0x0196013f, 0x026e003f, 0x05248036,
    0x0527f001, 0x05306802, 0x0533780f, 0x0534f001, 0x05378007, 0x05380016,
    0x05390001, 0x053c4801, 0x05401000, 0x05403000, 0x05405800, 0x05411809,
    0x0541b003, 0x0543a003, 0x05440001, 0x0545a011, 0x05467001, 0x05470011,
    0x0547c002, 0x0547e000, 0x0547f800, 0x05493009, 0x054a380c, 0x054af800,
    0x054c0003, 0x054d981a, 0x054ef001, 0x054f2800, 0x0551480d, 0x05521800,
    0x05526001, 0x0552e003, 0x0553b802, 0x0553d802, 0x05558000, 0x05559002,
    0x0555b801, 0x0555f001, 0x05560800, 0x0556f001, 0x05575806, 0x0557a801,
    0x055ad800, 0x055b5001, 0x055f180a, 0x06c00000, 0x06dbf801, 0x06dff801,
    0x06fff801, 0x07c7f800, 0x07d8f000, 0x07d94800, 0x07dd9010, 0x07e9f011,
    0x07ee7800, 0x07efe01d, 0x07f10032, 0x07f2a012, 0x07f34003, 0x07f7f800,
    0x07f8080e, 0x07f8d006, 0x07f9d805, 0x07fad80a, 0x07ff0006, 0x07ff4006,
    0x07ffc804, 0x08080002, 0x0809b808, 0x080bc810, 0x080c6002, 0x080c800c,
    0x080d0000, 0x080e802d, 0x08170000, 0x081bb004, 0x081cf800, 0x081e8000,
    0x082b7800, 0x0842b800, 0x0843b801, 0x0848f800, 0x0849f800, 0x08500802,
    0x08502801, 0x08506003, 0x0851c002, 0x0851f800, 0x08528008, 0x0853f800,
    0x08564000, 0x08572801, 0x08578006, 0x0859c806, 0x085cc803, 0x08692003,
    0x08755802, 0x0877e802, 0x087a300a, 0x087aa804, 0x087c1007, 0x08800002,
    0x0881c015, 0x08838000, 0x08839801, 0x0883f803, 0x08858012, 0x08866800,
    0x08880002, 0x0889380d, 0x088a0003, 0x088a2801, 0x088b9802, 0x088c0002,
    0x088d980d, 0x088e280a, 0x088ed800, 0x088ee802, 0x08916012, 0x08920800,
    0x08954800, 0x0896f80b, 0x08980003, 0x0899d801, 0x0899f006, 0x089a3801,
    0x089a5802, 0x089ab800, 0x089b1001, 0x089b3006, 0x089b8004, 0x08a1a811,
    0x08a25804, 0x08a2d001, 0x08a2e801, 0x08a58013, 0x08a63000, 0x08ad7806,
    0x08adc01f, 0x08aee001, 0x08b18013, 0x08b3000c, 0x08b5580c, 0x08b5c800,
    0x08b8e80e, 0x08b9e003, 0x08c1600f, 0x08c98005, 0x08c9b801, 0x08c9d803,
    0x08ca0000, 0x08ca1004, 0x08ce8806, 0x08ced006, 0x08cf1000, 0x08cf2000,
    0x08d00809, 0x08d19806, 0x08d1d80c, 0x08d2880a, 0x08d45012, 0x08d4f004,
    0x08d80009, 0x08e17807, 0x08e1c007, 0x08e20804, 0x08e38001, 0x08e49015,
    0x08e5480d, 0x08e98805, 0x08e9d000, 0x08e9e001, 0x08e9f806, 0x08ea3800,
    0x08ec5004, 0x08ec8001, 0x08ec9804, 0x08f79805, 0x08f80001, 0x08f81800,
    0x08f9a006, 0x08f9f011, 0x08fea81c, 0x08fff800, 0x09238004, 0x097f8801,
    0x09a18010, 0x09a2380e, 0x0b537001, 0x0b578005, 0x0b59800f, 0x0b5a2001,
    0x0b74b803, 0x0b7a7800, 0x0b7a8836, 0x0b7c7803, 0x0b7f1000, 0x0b7f2000,
    0x0b7f8001, 0x0de4e007, 0x0e78002d, 0x0e798016, 0x0e7a8073, 0x0e8000f5,
    0x0e880026, 0x0e8948c1, 0x0e900045, 0x0e980056, 0x0eb60800, 0x0eb6d800,
    0x0eb7d800, 0x0eb8a800, 0x0eb9a800, 0x0eba7800, 0x0ebb7800, 0x0ebc4800,
    0x0ebd4800, 0x0ebe1800, 0x0ec0028b, 0x0ed4d804, 0x0ed5080e, 0x0f000006,
    0x0f004010, 0x0f00d806, 0x0f011801, 0x0f013004, 0x0f047800, 0x0f098006,
    0x0f0a7800, 0x0f157000, 0x0f176003, 0x0f17f800, 0x0f276003, 0x0f468006,
    0x0f4a2006, 0x0f4af001, 0x0f656000, 0x0f658000, 0x0f697000, 0x0f778001,
    0x0f80002b, 0x0f818063, 0x0f85000e, 0x0f85880e, 0x0f86080e, 0x0f868824,
    0x0f886802, 0x0f896802, 0x0f8a5005, 0x0f8b5005, 0x0f8c5819, 0x0f8d3007,
    0x0f900002, 0x0f90802b, 0x0f920008, 0x0f928001, 0x0f930005, 0x0f9803d7,
    0x0fb6e010, 0x0fb7800c, 0x0fb80076, 0x0fbbd85e, 0x0fbf000b, 0x0fbf8000,
    0x0fc0000b, 0x0fc08037, 0x0fc28009, 0x0fc30027, 0x0fc4801d, 0x0fc58001,
    0x0fc80153, 0x0fd3000d, 0x0fd3800c, 0x0fd40008, 0x0fd4802d, 0x0fd5f806,
    0x0fd6700d, 0x0fd70008, 0x0fd78008, 0x0fd80092, 0x0fdca036, 0x70000800,
    0x7001005f, 0x700800ef, 0x78000000, 0x7fffe800, 0x80000000, 0x87ffe800
  ];
  return c_int::from(wcbsearch(wc, &EXTENTS) >= 0);
}

#[no_mangle]
pub extern "C" fn ouma_iswpunct_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswpunct(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswspace(wc: wint_t) -> c_int {
  return c_int::from(
    (wc >= 0x9 && wc <= 0xd) ||
      wc == 0x20 ||
      wc == 0x1680 ||
      (wc >= 0x2000 && wc <= 0x2006) ||
      (wc >= 0x2008 && wc <= 0x200a) ||
      (wc >= 0x2028 && wc <= 0x2029) ||
      wc == 0x205f ||
      wc == 0x3000
  );
}

#[no_mangle]
pub extern "C" fn ouma_iswspace_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswspace(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswupper(wc: wint_t) -> c_int {
  const EXTENTS: [u32; 609] = [
    0x00020819, 0x00060016, 0x0006c006, 0x00080000, 0x00081000, 0x00082000,
    0x00083000, 0x00084000, 0x00085000, 0x00086000, 0x00087000, 0x00088000,
    0x00089000, 0x0008a000, 0x0008b000, 0x0008c000, 0x0008d000, 0x0008e000,
    0x0008f000, 0x00090000, 0x00091000, 0x00092000, 0x00093000, 0x00094000,
    0x00095000, 0x00096000, 0x00097000, 0x00098000, 0x00099000, 0x0009a000,
    0x0009b000, 0x0009c800, 0x0009d800, 0x0009e800, 0x0009f800, 0x000a0800,
    0x000a1800, 0x000a2800, 0x000a3800, 0x000a5000, 0x000a6000, 0x000a7000,
    0x000a8000, 0x000a9000, 0x000aa000, 0x000ab000, 0x000ac000, 0x000ad000,
    0x000ae000, 0x000af000, 0x000b0000, 0x000b1000, 0x000b2000, 0x000b3000,
    0x000b4000, 0x000b5000, 0x000b6000, 0x000b7000, 0x000b8000, 0x000b9000,
    0x000ba000, 0x000bb000, 0x000bc001, 0x000bd800, 0x000be800, 0x000c0801,
    0x000c2000, 0x000c3001, 0x000c4802, 0x000c7003, 0x000c9801, 0x000cb002,
    0x000ce001, 0x000cf801, 0x000d1000, 0x000d2000, 0x000d3001, 0x000d4800,
    0x000d6000, 0x000d7001, 0x000d8802, 0x000da800, 0x000db801, 0x000de000,
    0x000e2001, 0x000e3801, 0x000e5001, 0x000e6800, 0x000e7800, 0x000e8800,
    0x000e9800, 0x000ea800, 0x000eb800, 0x000ec800, 0x000ed800, 0x000ef000,
    0x000f0000, 0x000f1000, 0x000f2000, 0x000f3000, 0x000f4000, 0x000f5000,
    0x000f6000, 0x000f7000, 0x000f8801, 0x000fa000, 0x000fb002, 0x000fd000,
    0x000fe000, 0x000ff000, 0x00100000, 0x00101000, 0x00102000, 0x00103000,
    0x00104000, 0x00105000, 0x00106000, 0x00107000, 0x00108000, 0x00109000,
    0x0010a000, 0x0010b000, 0x0010c000, 0x0010d000, 0x0010e000, 0x0010f000,
    0x00110000, 0x00111000, 0x00112000, 0x00113000, 0x00114000, 0x00115000,
    0x00116000, 0x00117000, 0x00118000, 0x00119000, 0x0011d001, 0x0011e801,
    0x00120800, 0x00121803, 0x00124000, 0x00125000, 0x00126000, 0x00127000,
    0x001b8000, 0x001b9000, 0x001bb000, 0x001bf800, 0x001c3000, 0x001c4002,
    0x001c6000, 0x001c7001, 0x001c8810, 0x001d1808, 0x001e7800, 0x001ec000,
    0x001ed000, 0x001ee000, 0x001ef000, 0x001f0000, 0x001f1000, 0x001f2000,
    0x001f3000, 0x001f4000, 0x001f5000, 0x001f6000, 0x001f7000, 0x001fa000,
    0x001fb800, 0x001fc801, 0x001fe832, 0x00230000, 0x00231000, 0x00232000,
    0x00233000, 0x00234000, 0x00235000, 0x00236000, 0x00237000, 0x00238000,
    0x00239000, 0x0023a000, 0x0023b000, 0x0023c000, 0x0023d000, 0x0023e000,
    0x0023f000, 0x00240000, 0x00245000, 0x00246000, 0x00247000, 0x00248000,
    0x00249000, 0x0024a000, 0x0024b000, 0x0024c000, 0x0024d000, 0x0024e000,
    0x0024f000, 0x00250000, 0x00251000, 0x00252000, 0x00253000, 0x00254000,
    0x00255000, 0x00256000, 0x00257000, 0x00258000, 0x00259000, 0x0025a000,
    0x0025b000, 0x0025c000, 0x0025d000, 0x0025e000, 0x0025f000, 0x00260001,
    0x00261800, 0x00262800, 0x00263800, 0x00264800, 0x00265800, 0x00266800,
    0x00268000, 0x00269000, 0x0026a000, 0x0026b000, 0x0026c000, 0x0026d000,
    0x0026e000, 0x0026f000, 0x00270000, 0x00271000, 0x00272000, 0x00273000,
    0x00274000, 0x00275000, 0x00276000, 0x00277000, 0x00278000, 0x00279000,
    0x0027a000, 0x0027b000, 0x0027c000, 0x0027d000, 0x0027e000, 0x0027f000,
    0x00280000, 0x00281000, 0x00282000, 0x00283000, 0x00284000, 0x00285000,
    0x00286000, 0x00287000, 0x00288000, 0x00289000, 0x0028a000, 0x0028b000,
    0x0028c000, 0x0028d000, 0x0028e000, 0x0028f000, 0x00290000, 0x00291000,
    0x00292000, 0x00293000, 0x00294000, 0x00295000, 0x00296000, 0x00297000,
    0x00298825, 0x00850025, 0x00863800, 0x00866800, 0x009d0055, 0x00e4802a,
    0x00e5e802, 0x00f00000, 0x00f01000, 0x00f02000, 0x00f03000, 0x00f04000,
    0x00f05000, 0x00f06000, 0x00f07000, 0x00f08000, 0x00f09000, 0x00f0a000,
    0x00f0b000, 0x00f0c000, 0x00f0d000, 0x00f0e000, 0x00f0f000, 0x00f10000,
    0x00f11000, 0x00f12000, 0x00f13000, 0x00f14000, 0x00f15000, 0x00f16000,
    0x00f17000, 0x00f18000, 0x00f19000, 0x00f1a000, 0x00f1b000, 0x00f1c000,
    0x00f1d000, 0x00f1e000, 0x00f1f000, 0x00f20000, 0x00f21000, 0x00f22000,
    0x00f23000, 0x00f24000, 0x00f25000, 0x00f26000, 0x00f27000, 0x00f28000,
    0x00f29000, 0x00f2a000, 0x00f2b000, 0x00f2c000, 0x00f2d000, 0x00f2e000,
    0x00f2f000, 0x00f30000, 0x00f31000, 0x00f32000, 0x00f33000, 0x00f34000,
    0x00f35000, 0x00f36000, 0x00f37000, 0x00f38000, 0x00f39000, 0x00f3a000,
    0x00f3b000, 0x00f3c000, 0x00f3d000, 0x00f3e000, 0x00f3f000, 0x00f40000,
    0x00f41000, 0x00f42000, 0x00f43000, 0x00f44000, 0x00f45000, 0x00f46000,
    0x00f47000, 0x00f48000, 0x00f49000, 0x00f4a000, 0x00f4f000, 0x00f50000,
    0x00f51000, 0x00f52000, 0x00f53000, 0x00f54000, 0x00f55000, 0x00f56000,
    0x00f57000, 0x00f58000, 0x00f59000, 0x00f5a000, 0x00f5b000, 0x00f5c000,
    0x00f5d000, 0x00f5e000, 0x00f5f000, 0x00f60000, 0x00f61000, 0x00f62000,
    0x00f63000, 0x00f64000, 0x00f65000, 0x00f66000, 0x00f67000, 0x00f68000,
    0x00f69000, 0x00f6a000, 0x00f6b000, 0x00f6c000, 0x00f6d000, 0x00f6e000,
    0x00f6f000, 0x00f70000, 0x00f71000, 0x00f72000, 0x00f73000, 0x00f74000,
    0x00f75000, 0x00f76000, 0x00f77000, 0x00f78000, 0x00f79000, 0x00f7a000,
    0x00f7b000, 0x00f7c000, 0x00f7d000, 0x00f7e000, 0x00f7f000, 0x00f84007,
    0x00f8c005, 0x00f94007, 0x00f9c007, 0x00fa4005, 0x00fac800, 0x00fad800,
    0x00fae800, 0x00faf800, 0x00fb4007, 0x00fc4007, 0x00fcc007, 0x00fd4007,
    0x00fdc004, 0x00fe4004, 0x00fec003, 0x00ff4004, 0x00ffc004, 0x01093000,
    0x01095001, 0x01099000, 0x010b000f, 0x010c1800, 0x0125b019, 0x0160002f,
    0x01630000, 0x01631002, 0x01633800, 0x01634800, 0x01635800, 0x01636803,
    0x01639000, 0x0163a800, 0x0163f002, 0x01641000, 0x01642000, 0x01643000,
    0x01644000, 0x01645000, 0x01646000, 0x01647000, 0x01648000, 0x01649000,
    0x0164a000, 0x0164b000, 0x0164c000, 0x0164d000, 0x0164e000, 0x0164f000,
    0x01650000, 0x01651000, 0x01652000, 0x01653000, 0x01654000, 0x01655000,
    0x01656000, 0x01657000, 0x01658000, 0x01659000, 0x0165a000, 0x0165b000,
    0x0165c000, 0x0165d000, 0x0165e000, 0x0165f000, 0x01660000, 0x01661000,
    0x01662000, 0x01663000, 0x01664000, 0x01665000, 0x01666000, 0x01667000,
    0x01668000, 0x01669000, 0x0166a000, 0x0166b000, 0x0166c000, 0x0166d000,
    0x0166e000, 0x0166f000, 0x01670000, 0x01671000, 0x01675800, 0x01676800,
    0x01679000, 0x05320000, 0x05321000, 0x05322000, 0x05323000, 0x05324000,
    0x05325000, 0x05326000, 0x05327000, 0x05328000, 0x05329000, 0x0532a000,
    0x0532b000, 0x0532c000, 0x0532d000, 0x0532e000, 0x0532f000, 0x05330000,
    0x05331000, 0x05332000, 0x05333000, 0x05334000, 0x05335000, 0x05336000,
    0x05340000, 0x05341000, 0x05342000, 0x05343000, 0x05344000, 0x05345000,
    0x05346000, 0x05347000, 0x05348000, 0x05349000, 0x0534a000, 0x0534b000,
    0x0534c000, 0x0534d000, 0x05391000, 0x05392000, 0x05393000, 0x05394000,
    0x05395000, 0x05396000, 0x05397000, 0x05399000, 0x0539a000, 0x0539b000,
    0x0539c000, 0x0539d000, 0x0539e000, 0x0539f000, 0x053a0000, 0x053a1000,
    0x053a2000, 0x053a3000, 0x053a4000, 0x053a5000, 0x053a6000, 0x053a7000,
    0x053a8000, 0x053a9000, 0x053aa000, 0x053ab000, 0x053ac000, 0x053ad000,
    0x053ae000, 0x053af000, 0x053b0000, 0x053b1000, 0x053b2000, 0x053b3000,
    0x053b4000, 0x053b5000, 0x053b6000, 0x053b7000, 0x053bc800, 0x053bd800,
    0x053be801, 0x053c0000, 0x053c1000, 0x053c2000, 0x053c3000, 0x053c5800,
    0x053c6800, 0x053c8000, 0x053c9000, 0x053cb000, 0x053cc000, 0x053cd000,
    0x053ce000, 0x053cf000, 0x053d0000, 0x053d1000, 0x053d2000, 0x053d3000,
    0x053d4000, 0x053d5004, 0x053d8004, 0x053db000, 0x053dc000, 0x053dd000,
    0x053de000, 0x053df000, 0x053e0000, 0x053e1000, 0x053e2003, 0x053e4800,
    0x053e8000, 0x053eb000, 0x053ec000, 0x053fa800, 0x07f90819, 0x08200027,
    0x08258023, 0x082b800a, 0x082be00e, 0x082c6006, 0x082ca001, 0x08640032,
    0x08c5001f, 0x0b72001f, 0x0f480021
  ];
  return c_int::from(wcbsearch(wc, &EXTENTS) >= 0);
}

#[no_mangle]
pub extern "C" fn ouma_iswupper_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswupper(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_iswxdigit(wc: wint_t) -> c_int {
  return c_int::from(
    (wc >= 0x30 && wc <= 0x39) ||
      (wc >= 0x41 && wc <= 0x46) ||
      (wc >= 0x61 && wc <= 0x66)
  );
}

#[no_mangle]
pub extern "C" fn ouma_iswxdigit_l(
  wc: wint_t,
  locale: locale_t
) -> c_int {
  c_int::from(ouma_iswxdigit(wc) > 0 && valid_in_locale(wc, locale))
}

#[no_mangle]
pub extern "C" fn ouma_towlower(wc: wint_t) -> wint_t {
  const EXTENTS: [u32; 668] = [
    0x00020819, 0x00060016, 0x0006c006, 0x00080000, 0x00081000, 0x00082000,
    0x00083000, 0x00084000, 0x00085000, 0x00086000, 0x00087000, 0x00088000,
    0x00089000, 0x0008a000, 0x0008b000, 0x0008c000, 0x0008d000, 0x0008e000,
    0x0008f000, 0x00090000, 0x00091000, 0x00092000, 0x00093000, 0x00094000,
    0x00095000, 0x00096000, 0x00097000, 0x00098000, 0x00099000, 0x0009a000,
    0x0009b000, 0x0009c800, 0x0009d800, 0x0009e800, 0x0009f800, 0x000a0800,
    0x000a1800, 0x000a2800, 0x000a3800, 0x000a5000, 0x000a6000, 0x000a7000,
    0x000a8000, 0x000a9000, 0x000aa000, 0x000ab000, 0x000ac000, 0x000ad000,
    0x000ae000, 0x000af000, 0x000b0000, 0x000b1000, 0x000b2000, 0x000b3000,
    0x000b4000, 0x000b5000, 0x000b6000, 0x000b7000, 0x000b8000, 0x000b9000,
    0x000ba000, 0x000bb000, 0x000bc000, 0x000bc800, 0x000bd800, 0x000be800,
    0x000c0800, 0x000c1000, 0x000c2000, 0x000c3000, 0x000c3800, 0x000c4801,
    0x000c5800, 0x000c7000, 0x000c7800, 0x000c8000, 0x000c8800, 0x000c9800,
    0x000ca000, 0x000cb000, 0x000cb800, 0x000cc000, 0x000ce000, 0x000ce800,
    0x000cf800, 0x000d0000, 0x000d1000, 0x000d2000, 0x000d3000, 0x000d3800,
    0x000d4800, 0x000d6000, 0x000d7000, 0x000d7800, 0x000d8801, 0x000d9800,
    0x000da800, 0x000db800, 0x000dc000, 0x000de000, 0x000e2000, 0x000e2800,
    0x000e3800, 0x000e4000, 0x000e5000, 0x000e5800, 0x000e6800, 0x000e7800,
    0x000e8800, 0x000e9800, 0x000ea800, 0x000eb800, 0x000ec800, 0x000ed800,
    0x000ef000, 0x000f0000, 0x000f1000, 0x000f2000, 0x000f3000, 0x000f4000,
    0x000f5000, 0x000f6000, 0x000f7000, 0x000f8800, 0x000f9000, 0x000fa000,
    0x000fb000, 0x000fb800, 0x000fc000, 0x000fd000, 0x000fe000, 0x000ff000,
    0x00100000, 0x00101000, 0x00102000, 0x00103000, 0x00104000, 0x00105000,
    0x00106000, 0x00107000, 0x00108000, 0x00109000, 0x0010a000, 0x0010b000,
    0x0010c000, 0x0010d000, 0x0010e000, 0x0010f000, 0x00110000, 0x00111000,
    0x00112000, 0x00113000, 0x00114000, 0x00115000, 0x00116000, 0x00117000,
    0x00118000, 0x00119000, 0x0011d000, 0x0011d800, 0x0011e800, 0x0011f000,
    0x00120800, 0x00121800, 0x00122000, 0x00122800, 0x00123000, 0x00124000,
    0x00125000, 0x00126000, 0x00127000, 0x001b8000, 0x001b9000, 0x001bb000,
    0x001bf800, 0x001c3000, 0x001c4002, 0x001c6000, 0x001c7001, 0x001c8810,
    0x001d1808, 0x001e7800, 0x001ec000, 0x001ed000, 0x001ee000, 0x001ef000,
    0x001f0000, 0x001f1000, 0x001f2000, 0x001f3000, 0x001f4000, 0x001f5000,
    0x001f6000, 0x001f7000, 0x001fa000, 0x001fb800, 0x001fc800, 0x001fd000,
    0x001fe802, 0x0020000f, 0x0020801f, 0x00230000, 0x00231000, 0x00232000,
    0x00233000, 0x00234000, 0x00235000, 0x00236000, 0x00237000, 0x00238000,
    0x00239000, 0x0023a000, 0x0023b000, 0x0023c000, 0x0023d000, 0x0023e000,
    0x0023f000, 0x00240000, 0x00245000, 0x00246000, 0x00247000, 0x00248000,
    0x00249000, 0x0024a000, 0x0024b000, 0x0024c000, 0x0024d000, 0x0024e000,
    0x0024f000, 0x00250000, 0x00251000, 0x00252000, 0x00253000, 0x00254000,
    0x00255000, 0x00256000, 0x00257000, 0x00258000, 0x00259000, 0x0025a000,
    0x0025b000, 0x0025c000, 0x0025d000, 0x0025e000, 0x0025f000, 0x00260000,
    0x00260800, 0x00261800, 0x00262800, 0x00263800, 0x00264800, 0x00265800,
    0x00266800, 0x00268000, 0x00269000, 0x0026a000, 0x0026b000, 0x0026c000,
    0x0026d000, 0x0026e000, 0x0026f000, 0x00270000, 0x00271000, 0x00272000,
    0x00273000, 0x00274000, 0x00275000, 0x00276000, 0x00277000, 0x00278000,
    0x00279000, 0x0027a000, 0x0027b000, 0x0027c000, 0x0027d000, 0x0027e000,
    0x0027f000, 0x00280000, 0x00281000, 0x00282000, 0x00283000, 0x00284000,
    0x00285000, 0x00286000, 0x00287000, 0x00288000, 0x00289000, 0x0028a000,
    0x0028b000, 0x0028c000, 0x0028d000, 0x0028e000, 0x0028f000, 0x00290000,
    0x00291000, 0x00292000, 0x00293000, 0x00294000, 0x00295000, 0x00296000,
    0x00297000, 0x00298825, 0x00850025, 0x00863800, 0x00866800, 0x009d004f,
    0x009f8005, 0x00e4802a, 0x00e5e802, 0x00f00000, 0x00f01000, 0x00f02000,
    0x00f03000, 0x00f04000, 0x00f05000, 0x00f06000, 0x00f07000, 0x00f08000,
    0x00f09000, 0x00f0a000, 0x00f0b000, 0x00f0c000, 0x00f0d000, 0x00f0e000,
    0x00f0f000, 0x00f10000, 0x00f11000, 0x00f12000, 0x00f13000, 0x00f14000,
    0x00f15000, 0x00f16000, 0x00f17000, 0x00f18000, 0x00f19000, 0x00f1a000,
    0x00f1b000, 0x00f1c000, 0x00f1d000, 0x00f1e000, 0x00f1f000, 0x00f20000,
    0x00f21000, 0x00f22000, 0x00f23000, 0x00f24000, 0x00f25000, 0x00f26000,
    0x00f27000, 0x00f28000, 0x00f29000, 0x00f2a000, 0x00f2b000, 0x00f2c000,
    0x00f2d000, 0x00f2e000, 0x00f2f000, 0x00f30000, 0x00f31000, 0x00f32000,
    0x00f33000, 0x00f34000, 0x00f35000, 0x00f36000, 0x00f37000, 0x00f38000,
    0x00f39000, 0x00f3a000, 0x00f3b000, 0x00f3c000, 0x00f3d000, 0x00f3e000,
    0x00f3f000, 0x00f40000, 0x00f41000, 0x00f42000, 0x00f43000, 0x00f44000,
    0x00f45000, 0x00f46000, 0x00f47000, 0x00f48000, 0x00f49000, 0x00f4a000,
    0x00f4f000, 0x00f50000, 0x00f51000, 0x00f52000, 0x00f53000, 0x00f54000,
    0x00f55000, 0x00f56000, 0x00f57000, 0x00f58000, 0x00f59000, 0x00f5a000,
    0x00f5b000, 0x00f5c000, 0x00f5d000, 0x00f5e000, 0x00f5f000, 0x00f60000,
    0x00f61000, 0x00f62000, 0x00f63000, 0x00f64000, 0x00f65000, 0x00f66000,
    0x00f67000, 0x00f68000, 0x00f69000, 0x00f6a000, 0x00f6b000, 0x00f6c000,
    0x00f6d000, 0x00f6e000, 0x00f6f000, 0x00f70000, 0x00f71000, 0x00f72000,
    0x00f73000, 0x00f74000, 0x00f75000, 0x00f76000, 0x00f77000, 0x00f78000,
    0x00f79000, 0x00f7a000, 0x00f7b000, 0x00f7c000, 0x00f7d000, 0x00f7e000,
    0x00f7f000, 0x00f84007, 0x00f8c005, 0x00f94007, 0x00f9c007, 0x00fa4005,
    0x00fac800, 0x00fad800, 0x00fae800, 0x00faf800, 0x00fb4007, 0x00fc4007,
    0x00fcc007, 0x00fd4007, 0x00fdc001, 0x00fdd001, 0x00fde000, 0x00fe4003,
    0x00fe6000, 0x00fec001, 0x00fed001, 0x00ff4001, 0x00ff5001, 0x00ff6000,
    0x00ffc001, 0x00ffd001, 0x00ffe000, 0x01093000, 0x01095000, 0x01095800,
    0x01099000, 0x010b000f, 0x010c1800, 0x0125b019, 0x0160002f, 0x01630000,
    0x01631000, 0x01631800, 0x01632000, 0x01633800, 0x01634800, 0x01635800,
    0x01636800, 0x01637000, 0x01637800, 0x01638000, 0x01639000, 0x0163a800,
    0x0163f001, 0x01640000, 0x01641000, 0x01642000, 0x01643000, 0x01644000,
    0x01645000, 0x01646000, 0x01647000, 0x01648000, 0x01649000, 0x0164a000,
    0x0164b000, 0x0164c000, 0x0164d000, 0x0164e000, 0x0164f000, 0x01650000,
    0x01651000, 0x01652000, 0x01653000, 0x01654000, 0x01655000, 0x01656000,
    0x01657000, 0x01658000, 0x01659000, 0x0165a000, 0x0165b000, 0x0165c000,
    0x0165d000, 0x0165e000, 0x0165f000, 0x01660000, 0x01661000, 0x01662000,
    0x01663000, 0x01664000, 0x01665000, 0x01666000, 0x01667000, 0x01668000,
    0x01669000, 0x0166a000, 0x0166b000, 0x0166c000, 0x0166d000, 0x0166e000,
    0x0166f000, 0x01670000, 0x01671000, 0x01675800, 0x01676800, 0x01679000,
    0x05320000, 0x05321000, 0x05322000, 0x05323000, 0x05324000, 0x05325000,
    0x05326000, 0x05327000, 0x05328000, 0x05329000, 0x0532a000, 0x0532b000,
    0x0532c000, 0x0532d000, 0x0532e000, 0x0532f000, 0x05330000, 0x05331000,
    0x05332000, 0x05333000, 0x05334000, 0x05335000, 0x05336000, 0x05340000,
    0x05341000, 0x05342000, 0x05343000, 0x05344000, 0x05345000, 0x05346000,
    0x05347000, 0x05348000, 0x05349000, 0x0534a000, 0x0534b000, 0x0534c000,
    0x0534d000, 0x05391000, 0x05392000, 0x05393000, 0x05394000, 0x05395000,
    0x05396000, 0x05397000, 0x05399000, 0x0539a000, 0x0539b000, 0x0539c000,
    0x0539d000, 0x0539e000, 0x0539f000, 0x053a0000, 0x053a1000, 0x053a2000,
    0x053a3000, 0x053a4000, 0x053a5000, 0x053a6000, 0x053a7000, 0x053a8000,
    0x053a9000, 0x053aa000, 0x053ab000, 0x053ac000, 0x053ad000, 0x053ae000,
    0x053af000, 0x053b0000, 0x053b1000, 0x053b2000, 0x053b3000, 0x053b4000,
    0x053b5000, 0x053b6000, 0x053b7000, 0x053bc800, 0x053bd800, 0x053be800,
    0x053bf000, 0x053c0000, 0x053c1000, 0x053c2000, 0x053c3000, 0x053c5800,
    0x053c6800, 0x053c8000, 0x053c9000, 0x053cb000, 0x053cc000, 0x053cd000,
    0x053ce000, 0x053cf000, 0x053d0000, 0x053d1000, 0x053d2000, 0x053d3000,
    0x053d4000, 0x053d5000, 0x053d5800, 0x053d6000, 0x053d6800, 0x053d7000,
    0x053d8000, 0x053d8800, 0x053d9000, 0x053d9800, 0x053da000, 0x053db000,
    0x053dc000, 0x053dd000, 0x053de000, 0x053df000, 0x053e0000, 0x053e1000,
    0x053e2000, 0x053e2800, 0x053e3000, 0x053e3800, 0x053e4800, 0x053e8000,
    0x053eb000, 0x053ec000, 0x053fa800, 0x07f90819, 0x08200027, 0x08258023,
    0x082b800a, 0x082be00e, 0x082c6006, 0x082ca001, 0x08640032, 0x08c5001f,
    0x0b72001f, 0x0f480021
  ];
  const DELTAS: [i32; 668] = [
    32, 32, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, -199, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -121, 1, 1, 1, 210, 1, 1, 206, 1,
    205, 1, 79, 202, 203, 1, 205, 207, 211, 209, 1, 211, 213, 214, 1, 1, 1,
    218, 1, 218, 1, 218, 1, 217, 1, 1, 219, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, -97, -56, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -130, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    10795, 1, -163, 10792, 1, -195, 69, 71, 1, 1, 1, 1, 1, 1, 1, 1, 116, 38,
    37, 64, 63, 32, 32, 8, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -60, 1, -7, 1,
    -130, 80, 32, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 48, 7264, 7264, 7264, 38864, 8, -3008, -3008, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -7615, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -8, -8, -8, -8,
    -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -74, -9, -86, -9, -8, -100, -8,
    -112, -7, -128, -126, -9, -7517, -8383, -8262, 28, 16, 1, 26, 48, 1,
    -10743, -3814, -10727, 1, 1, 1, -10780, -10749, -10783, -10782, 1, 1,
    -10815, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, -35332, 1, 1, 1, 1, 1, 1, -42280, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, -42308, -42319, -42315, -42305, -42308, -42258, -42282,
    -42261, 928, 1, 1, 1, 1, 1, 1, 1, 1, -48, -42307, -35384, 1, 1, 1, 1, 1, 1,
    32, 40, 40, 39, 39, 39, 39, 64, 32, 32, 34
  ];
  return wint_t::from(towctrans_search(wc, &EXTENTS, &DELTAS));
}

#[no_mangle]
pub extern "C" fn ouma_towlower_l(
  wc: wint_t,
  locale: locale_t
) -> wint_t {
  let nwc = ouma_towlower(wc);
  if valid_in_locale(nwc, locale) == true { nwc } else { wc }
}

#[no_mangle]
pub extern "C" fn ouma_towupper(wc: wint_t) -> wint_t {
  const EXTENTS: [u32; 684] = [
    0x00030819, 0x0005a800, 0x00070016, 0x0007c006, 0x0007f800, 0x00080800,
    0x00081800, 0x00082800, 0x00083800, 0x00084800, 0x00085800, 0x00086800,
    0x00087800, 0x00088800, 0x00089800, 0x0008a800, 0x0008b800, 0x0008c800,
    0x0008d800, 0x0008e800, 0x0008f800, 0x00090800, 0x00091800, 0x00092800,
    0x00093800, 0x00094800, 0x00095800, 0x00096800, 0x00097800, 0x00098800,
    0x00099800, 0x0009a800, 0x0009b800, 0x0009d000, 0x0009e000, 0x0009f000,
    0x000a0000, 0x000a1000, 0x000a2000, 0x000a3000, 0x000a4000, 0x000a5800,
    0x000a6800, 0x000a7800, 0x000a8800, 0x000a9800, 0x000aa800, 0x000ab800,
    0x000ac800, 0x000ad800, 0x000ae800, 0x000af800, 0x000b0800, 0x000b1800,
    0x000b2800, 0x000b3800, 0x000b4800, 0x000b5800, 0x000b6800, 0x000b7800,
    0x000b8800, 0x000b9800, 0x000ba800, 0x000bb800, 0x000bd000, 0x000be000,
    0x000bf000, 0x000bf800, 0x000c0000, 0x000c1800, 0x000c2800, 0x000c4000,
    0x000c6000, 0x000c9000, 0x000ca800, 0x000cc800, 0x000cd000, 0x000cf000,
    0x000d0800, 0x000d1800, 0x000d2800, 0x000d4000, 0x000d6800, 0x000d8000,
    0x000da000, 0x000db000, 0x000dc800, 0x000de800, 0x000df800, 0x000e2800,
    0x000e3000, 0x000e4000, 0x000e4800, 0x000e5800, 0x000e6000, 0x000e7000,
    0x000e8000, 0x000e9000, 0x000ea000, 0x000eb000, 0x000ec000, 0x000ed000,
    0x000ee000, 0x000ee800, 0x000ef800, 0x000f0800, 0x000f1800, 0x000f2800,
    0x000f3800, 0x000f4800, 0x000f5800, 0x000f6800, 0x000f7800, 0x000f9000,
    0x000f9800, 0x000fa800, 0x000fc800, 0x000fd800, 0x000fe800, 0x000ff800,
    0x00100800, 0x00101800, 0x00102800, 0x00103800, 0x00104800, 0x00105800,
    0x00106800, 0x00107800, 0x00108800, 0x00109800, 0x0010a800, 0x0010b800,
    0x0010c800, 0x0010d800, 0x0010e800, 0x0010f800, 0x00111800, 0x00112800,
    0x00113800, 0x00114800, 0x00115800, 0x00116800, 0x00117800, 0x00118800,
    0x00119800, 0x0011e000, 0x0011f801, 0x00121000, 0x00123800, 0x00124800,
    0x00125800, 0x00126800, 0x00127800, 0x00128000, 0x00128800, 0x00129000,
    0x00129800, 0x0012a000, 0x0012b001, 0x0012c800, 0x0012d800, 0x0012e000,
    0x00130000, 0x00130800, 0x00131800, 0x00132800, 0x00133000, 0x00134000,
    0x00134800, 0x00135000, 0x00135800, 0x00136000, 0x00137800, 0x00138800,
    0x00139000, 0x0013a800, 0x0013e800, 0x00140000, 0x00141000, 0x00141800,
    0x00143800, 0x00144000, 0x00144800, 0x00145001, 0x00146000, 0x00149000,
    0x0014e800, 0x0014f000, 0x001a2800, 0x001b8800, 0x001b9800, 0x001bb800,
    0x001bd802, 0x001d6000, 0x001d6802, 0x001d8810, 0x001e1000, 0x001e1808,
    0x001e6000, 0x001e6801, 0x001e8000, 0x001e8800, 0x001ea800, 0x001eb000,
    0x001eb800, 0x001ec800, 0x001ed800, 0x001ee800, 0x001ef800, 0x001f0800,
    0x001f1800, 0x001f2800, 0x001f3800, 0x001f4800, 0x001f5800, 0x001f6800,
    0x001f7800, 0x001f8000, 0x001f8800, 0x001f9000, 0x001f9800, 0x001fa800,
    0x001fc000, 0x001fd800, 0x0021801f, 0x0022800f, 0x00230800, 0x00231800,
    0x00232800, 0x00233800, 0x00234800, 0x00235800, 0x00236800, 0x00237800,
    0x00238800, 0x00239800, 0x0023a800, 0x0023b800, 0x0023c800, 0x0023d800,
    0x0023e800, 0x0023f800, 0x00240800, 0x00245800, 0x00246800, 0x00247800,
    0x00248800, 0x00249800, 0x0024a800, 0x0024b800, 0x0024c800, 0x0024d800,
    0x0024e800, 0x0024f800, 0x00250800, 0x00251800, 0x00252800, 0x00253800,
    0x00254800, 0x00255800, 0x00256800, 0x00257800, 0x00258800, 0x00259800,
    0x0025a800, 0x0025b800, 0x0025c800, 0x0025d800, 0x0025e800, 0x0025f800,
    0x00261000, 0x00262000, 0x00263000, 0x00264000, 0x00265000, 0x00266000,
    0x00267000, 0x00267800, 0x00268800, 0x00269800, 0x0026a800, 0x0026b800,
    0x0026c800, 0x0026d800, 0x0026e800, 0x0026f800, 0x00270800, 0x00271800,
    0x00272800, 0x00273800, 0x00274800, 0x00275800, 0x00276800, 0x00277800,
    0x00278800, 0x00279800, 0x0027a800, 0x0027b800, 0x0027c800, 0x0027d800,
    0x0027e800, 0x0027f800, 0x00280800, 0x00281800, 0x00282800, 0x00283800,
    0x00284800, 0x00285800, 0x00286800, 0x00287800, 0x00288800, 0x00289800,
    0x0028a800, 0x0028b800, 0x0028c800, 0x0028d800, 0x0028e800, 0x0028f800,
    0x00290800, 0x00291800, 0x00292800, 0x00293800, 0x00294800, 0x00295800,
    0x00296800, 0x00297800, 0x002b0825, 0x0086802a, 0x0087e802, 0x009fc005,
    0x00e40000, 0x00e40800, 0x00e41000, 0x00e41801, 0x00e42800, 0x00e43000,
    0x00e43800, 0x00e44000, 0x00ebc800, 0x00ebe800, 0x00ec7000, 0x00f00800,
    0x00f01800, 0x00f02800, 0x00f03800, 0x00f04800, 0x00f05800, 0x00f06800,
    0x00f07800, 0x00f08800, 0x00f09800, 0x00f0a800, 0x00f0b800, 0x00f0c800,
    0x00f0d800, 0x00f0e800, 0x00f0f800, 0x00f10800, 0x00f11800, 0x00f12800,
    0x00f13800, 0x00f14800, 0x00f15800, 0x00f16800, 0x00f17800, 0x00f18800,
    0x00f19800, 0x00f1a800, 0x00f1b800, 0x00f1c800, 0x00f1d800, 0x00f1e800,
    0x00f1f800, 0x00f20800, 0x00f21800, 0x00f22800, 0x00f23800, 0x00f24800,
    0x00f25800, 0x00f26800, 0x00f27800, 0x00f28800, 0x00f29800, 0x00f2a800,
    0x00f2b800, 0x00f2c800, 0x00f2d800, 0x00f2e800, 0x00f2f800, 0x00f30800,
    0x00f31800, 0x00f32800, 0x00f33800, 0x00f34800, 0x00f35800, 0x00f36800,
    0x00f37800, 0x00f38800, 0x00f39800, 0x00f3a800, 0x00f3b800, 0x00f3c800,
    0x00f3d800, 0x00f3e800, 0x00f3f800, 0x00f40800, 0x00f41800, 0x00f42800,
    0x00f43800, 0x00f44800, 0x00f45800, 0x00f46800, 0x00f47800, 0x00f48800,
    0x00f49800, 0x00f4a800, 0x00f4d800, 0x00f50800, 0x00f51800, 0x00f52800,
    0x00f53800, 0x00f54800, 0x00f55800, 0x00f56800, 0x00f57800, 0x00f58800,
    0x00f59800, 0x00f5a800, 0x00f5b800, 0x00f5c800, 0x00f5d800, 0x00f5e800,
    0x00f5f800, 0x00f60800, 0x00f61800, 0x00f62800, 0x00f63800, 0x00f64800,
    0x00f65800, 0x00f66800, 0x00f67800, 0x00f68800, 0x00f69800, 0x00f6a800,
    0x00f6b800, 0x00f6c800, 0x00f6d800, 0x00f6e800, 0x00f6f800, 0x00f70800,
    0x00f71800, 0x00f72800, 0x00f73800, 0x00f74800, 0x00f75800, 0x00f76800,
    0x00f77800, 0x00f78800, 0x00f79800, 0x00f7a800, 0x00f7b800, 0x00f7c800,
    0x00f7d800, 0x00f7e800, 0x00f7f800, 0x00f80007, 0x00f88005, 0x00f90007,
    0x00f98007, 0x00fa0005, 0x00fa8800, 0x00fa9800, 0x00faa800, 0x00fab800,
    0x00fb0007, 0x00fb8001, 0x00fb9003, 0x00fbb001, 0x00fbc001, 0x00fbd001,
    0x00fbe001, 0x00fc0007, 0x00fc8007, 0x00fd0007, 0x00fd8001, 0x00fd9800,
    0x00fdf000, 0x00fe1800, 0x00fe8001, 0x00ff0001, 0x00ff2800, 0x00ff9800,
    0x010a7000, 0x010b800f, 0x010c2000, 0x01268019, 0x0161802f, 0x01630800,
    0x01632800, 0x01633000, 0x01634000, 0x01635000, 0x01636000, 0x01639800,
    0x0163b000, 0x01640800, 0x01641800, 0x01642800, 0x01643800, 0x01644800,
    0x01645800, 0x01646800, 0x01647800, 0x01648800, 0x01649800, 0x0164a800,
    0x0164b800, 0x0164c800, 0x0164d800, 0x0164e800, 0x0164f800, 0x01650800,
    0x01651800, 0x01652800, 0x01653800, 0x01654800, 0x01655800, 0x01656800,
    0x01657800, 0x01658800, 0x01659800, 0x0165a800, 0x0165b800, 0x0165c800,
    0x0165d800, 0x0165e800, 0x0165f800, 0x01660800, 0x01661800, 0x01662800,
    0x01663800, 0x01664800, 0x01665800, 0x01666800, 0x01667800, 0x01668800,
    0x01669800, 0x0166a800, 0x0166b800, 0x0166c800, 0x0166d800, 0x0166e800,
    0x0166f800, 0x01670800, 0x01671800, 0x01676000, 0x01677000, 0x01679800,
    0x01680025, 0x01693800, 0x01696800, 0x05320800, 0x05321800, 0x05322800,
    0x05323800, 0x05324800, 0x05325800, 0x05326800, 0x05327800, 0x05328800,
    0x05329800, 0x0532a800, 0x0532b800, 0x0532c800, 0x0532d800, 0x0532e800,
    0x0532f800, 0x05330800, 0x05331800, 0x05332800, 0x05333800, 0x05334800,
    0x05335800, 0x05336800, 0x05340800, 0x05341800, 0x05342800, 0x05343800,
    0x05344800, 0x05345800, 0x05346800, 0x05347800, 0x05348800, 0x05349800,
    0x0534a800, 0x0534b800, 0x0534c800, 0x0534d800, 0x05391800, 0x05392800,
    0x05393800, 0x05394800, 0x05395800, 0x05396800, 0x05397800, 0x05399800,
    0x0539a800, 0x0539b800, 0x0539c800, 0x0539d800, 0x0539e800, 0x0539f800,
    0x053a0800, 0x053a1800, 0x053a2800, 0x053a3800, 0x053a4800, 0x053a5800,
    0x053a6800, 0x053a7800, 0x053a8800, 0x053a9800, 0x053aa800, 0x053ab800,
    0x053ac800, 0x053ad800, 0x053ae800, 0x053af800, 0x053b0800, 0x053b1800,
    0x053b2800, 0x053b3800, 0x053b4800, 0x053b5800, 0x053b6800, 0x053b7800,
    0x053bd000, 0x053be000, 0x053bf800, 0x053c0800, 0x053c1800, 0x053c2800,
    0x053c3800, 0x053c6000, 0x053c8800, 0x053c9800, 0x053ca000, 0x053cb800,
    0x053cc800, 0x053cd800, 0x053ce800, 0x053cf800, 0x053d0800, 0x053d1800,
    0x053d2800, 0x053d3800, 0x053d4800, 0x053da800, 0x053db800, 0x053dc800,
    0x053dd800, 0x053de800, 0x053df800, 0x053e0800, 0x053e1800, 0x053e4000,
    0x053e5000, 0x053e8800, 0x053eb800, 0x053ec800, 0x053fb000, 0x055a9800,
    0x055b804f, 0x07fa0819, 0x08214027, 0x0826c023, 0x082cb80a, 0x082d180e,
    0x082d9806, 0x082dd801, 0x08660032, 0x08c6001f, 0x0b73001f, 0x0f491021
  ];
  const DELTAS: [i32; 684] = [
    -32, 743, -32, -32, 121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -232, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -300, 195, -1, -1, -1,
    -1, -1, 97, -1, 163, 130, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1,
    -2, -1, -2, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -79, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    10815, -1, -1, -1, -1, -1, -1, 10783, 10780, 10782, -210, -206, -205, -202,
    -203, 42319, -205, 42315, -207, 42280, 42308, -209, -211, 42308, 10743,
    42305, -211, 10749, -213, -214, 10727, -218, 42307, -218, 42282, -218, -69,
    -217, -71, -219, 42261, 42258, 84, -1, -1, -1, 130, -38, -37, -32, -31,
    -32, -64, -63, -62, -57, -47, -54, -8, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -86, -80, 7, -116, -96, -1, -1, -32, -80, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -15, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -48, 3008, 3008, -8, -6254, -6253, -6244, -6242, -6243, -6236, -6181,
    35266, 35332, 3814, 35384, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8,
    8, 8, 8, 8, 8, 8, 8, 8, 8, 74, 86, 100, 128, 112, 126, 8, 8, 8, 8, 9,
    -7205, 9, 8, 8, 7, 9, -28, -16, -1, -26, -48, -1, -10795, -10792, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -7264, -7264, -7264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -928, -38864, -32, -40, -40, -39, -39, -39, -39, -64, -32, -32,
    -34
  ];
  return wint_t::from(towctrans_search(wc, &EXTENTS, &DELTAS));
}

#[no_mangle]
pub extern "C" fn ouma_towupper_l(
  wc: wint_t,
  locale: locale_t
) -> wint_t {
  let nwc = ouma_towupper(wc);
  if valid_in_locale(nwc, locale) == true { nwc } else { wc }
}
